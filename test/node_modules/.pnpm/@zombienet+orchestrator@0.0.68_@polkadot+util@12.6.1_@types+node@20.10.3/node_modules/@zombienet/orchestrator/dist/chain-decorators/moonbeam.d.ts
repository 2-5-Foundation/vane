import { ChainSpec } from "../types";
import { Node } from "../sharedTypes";
export type GenesisNodeKey = [string, string];
declare function specHaveSessionsKeys(chainSpec: ChainSpec): any;
declare function getAuthorityKeys(chainSpec: ChainSpec): any;
declare function addAuthority(specPath: string, node: Node, key: GenesisNodeKey): Promise<void>;
declare function clearAuthorities(specPath: string): Promise<void>;
declare function generateKeyForNode(nodeName?: string): Promise<any>;
export declare function getNodeKey(node: Node): GenesisNodeKey;
declare function addParaCustom(specPath: string, node: Node): Promise<void>;
declare function getProcessStartTimeKey(): string;
declare const _default: {
    specHaveSessionsKeys: typeof specHaveSessionsKeys;
    addAuthority: typeof addAuthority;
    clearAuthorities: typeof clearAuthorities;
    generateKeyForNode: typeof generateKeyForNode;
    addParaCustom: typeof addParaCustom;
    getAuthorityKeys: typeof getAuthorityKeys;
    getNodeKey: typeof getNodeKey;
    getProcessStartTimeKey: typeof getProcessStartTimeKey;
};
export default _default;
