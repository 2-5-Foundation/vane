"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.whichChain = exports.decorate = exports.CHAIN = void 0;
var CHAIN;
(function (CHAIN) {
    CHAIN["AssetHubPolkadot"] = "asset_hub_polkadot";
    CHAIN["Moonbeam"] = "moonbeam";
    CHAIN["Efinity"] = "efinity";
    CHAIN["Acala"] = "acala";
    CHAIN["Astar"] = "astar";
    CHAIN["Bifrost"] = "bifrost";
    CHAIN["Equilibrium"] = "equilibrium";
    CHAIN["Oak"] = "oak";
    CHAIN["Mangata"] = "mangata";
    CHAIN["Generic"] = "generic";
    CHAIN["LocalV"] = "local_v";
})(CHAIN || (exports.CHAIN = CHAIN = {}));
// imports
const acala_1 = __importDefault(require("./acala"));
const asset_hub_polkadot_1 = __importDefault(require("./asset_hub_polkadot"));
const astar_1 = __importDefault(require("./astar"));
const bifrost_1 = __importDefault(require("./bifrost"));
const efinity_1 = __importDefault(require("./efinity"));
const equilibrium_1 = __importDefault(require("./equilibrium"));
const local_v_1 = __importDefault(require("./local-v"));
const mangata_1 = __importDefault(require("./mangata"));
const moonbeam_1 = __importDefault(require("./moonbeam"));
const oak_1 = __importDefault(require("./oak"));
function whichChain(chain) {
    if (chain.includes("statemint") || chain.includes("asset-hub-polkadot"))
        return CHAIN.AssetHubPolkadot;
    if (/moonbase|moonriver|moonbeam/.test(chain))
        return CHAIN.Moonbeam;
    if (/efinity|matrix/.test(chain))
        return CHAIN.Efinity;
    if (/acala|karura|mandala/.test(chain))
        return CHAIN.Acala;
    if (/astar|shiden|shibuya/.test(chain))
        return CHAIN.Astar;
    if (/bifrost/.test(chain))
        return CHAIN.Bifrost;
    if (/equilibrium|genshiro/.test(chain))
        return CHAIN.Equilibrium;
    if (/oak|turing|neumann/.test(chain))
        return CHAIN.Oak;
    if (/mangata/.test(chain))
        return CHAIN.Mangata;
    if (/local-v/.test(chain))
        return CHAIN.LocalV;
    return CHAIN.Generic;
}
exports.whichChain = whichChain;
const moonbeamDecorators = Object.keys(moonbeam_1.default).reduce((memo, fn) => {
    memo[fn] = moonbeam_1.default[fn];
    return memo;
}, Object.create({}));
const assetHubPolkadotDecorators = Object.keys(asset_hub_polkadot_1.default).reduce((memo, fn) => {
    memo[fn] = asset_hub_polkadot_1.default[fn];
    return memo;
}, Object.create({}));
const efinityDecorators = Object.keys(efinity_1.default).reduce((memo, fn) => {
    memo[fn] = efinity_1.default[fn];
    return memo;
}, Object.create({}));
const acalaDecorators = Object.keys(acala_1.default).reduce((memo, fn) => {
    memo[fn] = acala_1.default[fn];
    return memo;
}, Object.create({}));
const astarDecorators = Object.keys(astar_1.default).reduce((memo, fn) => {
    memo[fn] = astar_1.default[fn];
    return memo;
}, Object.create({}));
const bifrostDecorators = Object.keys(bifrost_1.default).reduce((memo, fn) => {
    memo[fn] = bifrost_1.default[fn];
    return memo;
}, Object.create({}));
const eqDecorators = Object.keys(equilibrium_1.default).reduce((memo, fn) => {
    memo[fn] = equilibrium_1.default[fn];
    return memo;
}, Object.create({}));
const oakDecorators = Object.keys(oak_1.default).reduce((memo, fn) => {
    memo[fn] = oak_1.default[fn];
    return memo;
}, Object.create({}));
const mangataDecorators = Object.keys(mangata_1.default).reduce((memo, fn) => {
    memo[fn] = mangata_1.default[fn];
    return memo;
}, Object.create({}));
const localVDecorators = Object.keys(local_v_1.default).reduce((memo, fn) => {
    memo[fn] = local_v_1.default[fn];
    return memo;
}, Object.create({}));
const decorators = {
    moonbeam: moonbeamDecorators,
    asset_hub_polkadot: assetHubPolkadotDecorators,
    efinity: efinityDecorators,
    acala: acalaDecorators,
    astar: astarDecorators,
    bifrost: bifrostDecorators,
    equilibrium: eqDecorators,
    oak: oakDecorators,
    mangata: mangataDecorators,
    local_v: localVDecorators,
    generic: {},
};
function decorate(chain, fns) {
    const decorated = fns.map((fn) => {
        return decorators[chain][fn.name] ? decorators[chain][fn.name] : fn;
    });
    return decorated;
}
exports.decorate = decorate;
