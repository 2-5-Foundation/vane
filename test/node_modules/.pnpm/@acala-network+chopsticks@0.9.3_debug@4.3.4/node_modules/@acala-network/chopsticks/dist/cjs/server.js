"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createServer", {
    enumerable: true,
    get: function() {
        return createServer;
    }
});
const _ws = require("ws");
const _chopstickscore = require("@acala-network/chopsticks-core");
const _zod = require("zod");
const _logger = require("./logger.js");
const logger = _logger.defaultLogger.child({
    name: 'ws'
});
const singleRequest = _zod.z.object({
    id: _zod.z.number(),
    jsonrpc: _zod.z.literal('2.0'),
    method: _zod.z.string(),
    params: _zod.z.array(_zod.z.any()).default([])
});
const batchRequest = _zod.z.array(singleRequest);
const requestSchema = _zod.z.union([
    singleRequest,
    batchRequest
]);
const parseRequest = (request)=>{
    try {
        return JSON.parse(request);
    } catch (e) {
        return undefined;
    }
};
const createWS = async (port)=>{
    const wss = new _ws.WebSocketServer({
        port,
        maxPayload: 1024 * 1024 * 100
    });
    const promise = new Promise((resolve)=>{
        wss.on('listening', ()=>{
            resolve([
                wss,
                wss.address().port
            ]);
        });
        wss.on('error', (_)=>{
            resolve([]);
        });
    });
    return promise;
};
const createServer = async (handler, port)=>{
    let wss;
    let listenPort;
    for(let i = 0; i < 10; i++){
        const preferPort = (port ?? 0) > 0 ? (port ?? 0) + i : 0;
        logger.debug('Try starting on port %d', preferPort);
        const [maybeWss, maybeListenPort] = await createWS(preferPort);
        if (maybeWss && maybeListenPort) {
            wss = maybeWss;
            listenPort = maybeListenPort;
            break;
        }
    }
    if (!wss || !listenPort) {
        throw new Error(`Failed to create WebsocketServer at port ${port}`);
    }
    wss.on('connection', (ws)=>{
        logger.debug('New connection');
        const send = (data)=>{
            if (ws.readyState === _ws.WebSocket.OPEN) {
                ws.send(JSON.stringify(data));
            }
        };
        const subscriptions = {};
        const subscriptionManager = {
            subscribe: (method, subid, onCancel = ()=>{})=>{
                subscriptions[subid] = onCancel;
                return (data)=>{
                    if (subscriptions[subid]) {
                        logger.trace({
                            method,
                            subid,
                            data: (0, _logger.truncate)(data)
                        }, 'Subscription notification');
                        send({
                            jsonrpc: '2.0',
                            method,
                            params: {
                                result: data,
                                subscription: subid
                            }
                        });
                    }
                };
            },
            unsubscribe: (subid)=>{
                if (subscriptions[subid]) {
                    subscriptions[subid](subid);
                    delete subscriptions[subid];
                }
            }
        };
        const processRequest = async (req)=>{
            logger.trace({
                id: req.id,
                method: req.method
            }, 'Received message');
            try {
                const resp = await handler(req, subscriptionManager);
                logger.trace({
                    id: req.id,
                    method: req.method,
                    result: (0, _logger.truncate)(resp)
                }, 'Response for request');
                return {
                    id: req.id,
                    jsonrpc: '2.0',
                    result: resp ?? null
                };
            } catch (e) {
                logger.info('Error handling request: %s %o', e, e.stack);
                return {
                    id: req.id,
                    jsonrpc: '2.0',
                    error: e instanceof _chopstickscore.ResponseError ? e : {
                        code: -32603,
                        message: `Internal ${e}`
                    }
                };
            }
        };
        ws.on('close', ()=>{
            logger.debug('Connection closed');
            for (const [subid, onCancel] of Object.entries(subscriptions)){
                onCancel(subid);
            }
            ws.removeAllListeners();
        });
        ws.on('error', ()=>{
            logger.debug('Connection error');
            for (const [subid, onCancel] of Object.entries(subscriptions)){
                onCancel(subid);
            }
            ws.removeAllListeners();
        });
        ws.on('message', async (message)=>{
            const parsed = await requestSchema.safeParseAsync(parseRequest(message.toString()));
            if (!parsed.success) {
                logger.info('Invalid request: %s', message);
                send({
                    id: null,
                    jsonrpc: '2.0',
                    error: {
                        code: -32600,
                        message: 'Invalid JSON Request'
                    }
                });
                return;
            }
            const { data: req } = parsed;
            if (Array.isArray(req)) {
                logger.trace({
                    req
                }, 'Received batch request');
                const resp = await Promise.all(req.map(processRequest));
                send(resp);
            } else {
                logger.trace({
                    req
                }, 'Received single request');
                const resp = await processRequest(req);
                send(resp);
            }
        });
    });
    return {
        port: listenPort,
        close: ()=>new Promise((resolve, reject)=>{
                wss?.clients.forEach((socket)=>socket.close());
                wss?.close((err)=>{
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            })
    };
};
