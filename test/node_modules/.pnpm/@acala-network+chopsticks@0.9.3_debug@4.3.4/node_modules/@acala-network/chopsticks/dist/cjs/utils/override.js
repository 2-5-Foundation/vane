"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    overrideStorage: function() {
        return overrideStorage;
    },
    overrideWasm: function() {
        return overrideWasm;
    }
});
const _chopstickscore = require("@acala-network/chopsticks-core");
const _nodefs = require("node:fs");
const _jsyaml = /*#__PURE__*/ _interop_require_default(require("js-yaml"));
const _logger = require("../logger.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const overrideStorage = async (chain, storage, at)=>{
    if (storage == null) {
        return;
    }
    let storageValue;
    if (typeof storage === 'string') {
        if (!(0, _nodefs.existsSync)(storage)) throw Error(`File ${storage} does not exist`);
        storageValue = _jsyaml.default.load(String((0, _nodefs.readFileSync)(storage)));
    } else {
        storageValue = storage;
    }
    const blockHash = await (0, _chopstickscore.setStorage)(chain, storageValue, at);
    _logger.defaultLogger.trace({
        blockHash,
        storage
    }, 'OverrideStorage');
};
const overrideWasm = async (chain, wasmPath, at)=>{
    if (wasmPath == null) {
        return;
    }
    const wasm = (0, _nodefs.readFileSync)(wasmPath);
    let wasmHex;
    if (wasm.at(0) === 0x30 && wasm.at(1) === 0x78) {
        // starts with 0x
        wasmHex = wasm.toString().trim();
    } else {
        wasmHex = '0x' + wasm.toString('hex');
    }
    if (at) {
        const block = await chain.getBlock(at);
        if (!block) throw new Error(`Cannot find block ${at}`);
        block.setWasm(wasmHex);
    } else {
        chain.head.setWasm(wasmHex);
    }
};
