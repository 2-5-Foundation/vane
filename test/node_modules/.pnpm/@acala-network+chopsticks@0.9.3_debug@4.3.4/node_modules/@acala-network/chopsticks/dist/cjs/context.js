"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    genesisFromUrl: function() {
        return genesisFromUrl;
    },
    setupContext: function() {
        return setupContext;
    }
});
require("./utils/tunnel.js");
const _chopstickscore = require("@acala-network/chopsticks-core");
const _chopsticksdb = require("@acala-network/chopsticks-db");
const _override = require("./utils/override.js");
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const logger = _chopstickscore.defaultLogger.child({
    name: 'setup-context'
});
const genesisFromUrl = async (url)=>{
    const getFile = async (url)=>{
        if ((0, _chopstickscore.isUrl)(url)) {
            return _axios.default.get(url).then((x)=>x.data);
        } else if (typeof process === 'object') {
            const { lstatSync, readFileSync } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("node:fs")));
            if (lstatSync(url).isFile()) {
                return JSON.parse(String(readFileSync(url)));
            }
        }
        throw Error(`invalid genesis path or url ${url}`);
    };
    return new _chopstickscore.GenesisProvider(await getFile(url));
};
const setupContext = async (argv, overrideParent = false)=>{
    let genesis;
    if (argv.genesis) {
        if (typeof argv.genesis === 'string') {
            genesis = await genesisFromUrl(argv.genesis);
        } else {
            genesis = new _chopstickscore.GenesisProvider(argv.genesis);
        }
    }
    const chain = await (0, _chopstickscore.setup)({
        endpoint: argv.endpoint,
        block: argv.block,
        genesis,
        buildBlockMode: argv['build-block-mode'],
        db: argv.db ? new _chopsticksdb.SqliteDatabase(argv.db) : undefined,
        mockSignatureHost: argv['mock-signature-host'],
        allowUnresolvedImports: argv['allow-unresolved-imports'],
        runtimeLogLevel: argv['runtime-log-level'],
        registeredTypes: argv['registered-types'],
        offchainWorker: argv['offchain-worker'],
        maxMemoryBlockCount: argv['max-memory-block-count']
    });
    // load block from db
    if (chain.db) {
        if (argv.resume) {
            let blockData = null;
            if (typeof argv.resume === 'string' && argv.resume.startsWith('0x')) {
                blockData = await chain.db.queryBlock(argv.resume);
            } else if (typeof argv.resume === 'boolean' || argv.resume === 'true') {
                blockData = await chain.db.queryHighestBlock();
            } else if (Number.isInteger(+argv.resume)) {
                blockData = await chain.db.queryBlockByNumber(+argv.resume);
            } else {
                throw new Error(`Resume failed. Invalid resume option ${argv.resume}`);
            }
            if (blockData) {
                const block = await chain.loadBlockFromDB(blockData.number);
                block && await chain.setHead(block);
                logger.info(`Resume from block ${blockData.number}, hash: ${blockData.hash}`);
            } else {
                throw new Error(`Resume failed. Cannot find block ${argv.resume}`);
            }
        }
    }
    if (argv.timestamp) await (0, _chopstickscore.timeTravel)(chain, argv.timestamp);
    let at;
    if (overrideParent) {
        // in case of run block we need to apply wasm-override and import-storage to parent block
        const block = await chain.head.parentBlock;
        if (!block) throw new Error('Cannot find parent block');
        at = block.hash;
    }
    // override wasm before importing storage, in case new pallets have been
    // added that have storage imports
    await (0, _override.overrideWasm)(chain, argv['wasm-override'], at);
    await (0, _override.overrideStorage)(chain, argv['import-storage'], at);
    return {
        chain
    };
};
