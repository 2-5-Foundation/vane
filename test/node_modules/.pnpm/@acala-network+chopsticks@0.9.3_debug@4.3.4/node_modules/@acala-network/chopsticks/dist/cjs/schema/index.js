"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    configSchema: function() {
        return configSchema;
    },
    fetchConfig: function() {
        return fetchConfig;
    },
    zHash: function() {
        return zHash;
    },
    zHex: function() {
        return zHex;
    }
});
const _chopstickscore = require("@acala-network/chopsticks-core");
const _nodepath = require("node:path");
const _nodefs = require("node:fs");
const _zod = require("zod");
const _lodash = /*#__PURE__*/ _interop_require_default(require("lodash"));
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _jsyaml = /*#__PURE__*/ _interop_require_default(require("js-yaml"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const zHex = _zod.z.custom((val)=>/^0x\w+$/.test(val));
const zHash = _zod.z.string().length(66).and(zHex);
const configSchema = _zod.z.object({
    port: _zod.z.number().optional(),
    endpoint: _zod.z.union([
        _zod.z.string(),
        _zod.z.array(_zod.z.string())
    ]).optional(),
    block: _zod.z.union([
        _zod.z.string().length(66).startsWith('0x'),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    'build-block-mode': _zod.z.nativeEnum(_chopstickscore.BuildBlockMode).optional(),
    'import-storage': _zod.z.any().optional(),
    'mock-signature-host': _zod.z.boolean().optional(),
    'max-memory-block-count': _zod.z.number().optional(),
    db: _zod.z.string().optional(),
    'wasm-override': _zod.z.string().optional(),
    genesis: _zod.z.union([
        _zod.z.string(),
        _chopstickscore.genesisSchema
    ]).optional(),
    timestamp: _zod.z.number().optional(),
    'registered-types': _zod.z.any().optional(),
    'runtime-log-level': _zod.z.number().min(0).max(5).optional(),
    'offchain-worker': _zod.z.boolean().optional(),
    resume: _zod.z.union([
        _zod.z.string().length(66).startsWith('0x'),
        _zod.z.number(),
        _zod.z.boolean()
    ]).optional()
}).strict();
const CONFIGS_BASE_URL = 'https://raw.githubusercontent.com/AcalaNetwork/chopsticks/master/configs/';
const fetchConfig = async (path)=>{
    let file;
    if ((0, _chopstickscore.isUrl)(path)) {
        file = await _axios.default.get(path).then((x)=>x.data);
    } else {
        try {
            file = (0, _nodefs.readFileSync)(path, 'utf8');
        } catch (err) {
            if ((0, _nodepath.basename)(path) === path && [
                '',
                '.yml',
                '.yaml',
                '.json'
            ].includes((0, _nodepath.extname)(path))) {
                if ((0, _nodepath.extname)(path) === '') {
                    path += '.yml';
                }
                const url = CONFIGS_BASE_URL + path;
                _chopstickscore.defaultLogger.info(`Loading config file ${url}`);
                file = await _axios.default.get(url).then((x)=>x.data);
            } else {
                throw err;
            }
        }
    }
    const config = _jsyaml.default.load(_lodash.default.template(file, {
        variable: 'env'
    })(process.env));
    return configSchema.parse(config);
};
