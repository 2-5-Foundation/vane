/* eslint-disable @typescript-eslint/no-unnecessary-qualifier */
import InputPromptBase from 'inquirer/lib/prompts/base.js';
import observe from 'inquirer/lib/utils/events.js';
import ora from 'ora';
class PressToContinuePrompt extends InputPromptBase {
    constructor(questions, rl, answers) {
        super(questions, rl, answers);
        Object.defineProperty(this, "spinner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "done", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if ([
            this.opt.anyKey !== undefined,
            this.opt.enter !== undefined,
            this.opt.key !== undefined,
        ].filter((option) => option).length !== 1) {
            throw new Error('Exactly one of the options `enter`, `key`, or `anyKey` must be set.');
        }
    }
    _run(done) {
        this.done = done;
        const events = observe(this.rl);
        events.line.subscribe(() => {
            // TODO: find a more elegant solution to remove the extra line (the ora spinner artifact) when user presses enter
            process.stderr.moveCursor(0, -1);
            process.stderr.clearLine(1);
            if (this.opt.enter || this.opt.anyKey) {
                this._done({
                    key: {
                        name: 'Enter',
                    },
                    value: 'enter',
                });
            }
        });
        events.keypress.subscribe((event) => {
            if (this.opt.anyKey) {
                this._done(event);
            }
            else if (event.key.name === this.opt.key) {
                this._done(event);
            }
        });
        this.render();
        return this;
    }
    _done(key) {
        if (this.spinner?.isSpinning) {
            const frame = this.spinner.frame();
            this.spinner.stop();
            process.stderr.write(frame);
        }
        this.done(key);
    }
    render() {
        const message = this.opt.pressToContinueMessage ??
            `Press ${this.opt.enter ? 'enter' : 'any key'} to continue...`;
        this.spinner = ora({
            ...this.opt.oraOptions,
            text: message,
        });
        this.spinner.start();
    }
}
export default PressToContinuePrompt;
