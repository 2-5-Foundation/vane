import { BlockEntity, KeyValuePair } from './db/entities.js';
export class BaseSqlDatabase {
    close = async ()=>{
        const db = await this.datasource;
        await db.destroy();
    };
    async saveBlock(block) {
        const db = await this.datasource;
        const { hash, number, header, extrinsics, parentHash, storageDiff } = block;
        await db.transaction(async (transactionalEntityManager)=>{
            await transactionalEntityManager.getRepository(BlockEntity).delete({
                number
            });
            await transactionalEntityManager.getRepository(BlockEntity).upsert({
                hash,
                number,
                header,
                extrinsics,
                parentHash,
                storageDiff
            }, [
                'hash'
            ]);
        });
    }
    async queryBlock(hash) {
        const db = await this.datasource;
        return db.getRepository(BlockEntity).findOne({
            where: {
                hash
            }
        });
    }
    async queryBlockByNumber(number) {
        const db = await this.datasource;
        return db.getRepository(BlockEntity).findOne({
            where: {
                number
            },
            order: {
                number: 'desc'
            }
        });
    }
    async queryHighestBlock() {
        const db = await this.datasource;
        return db.getRepository(BlockEntity).findOne({
            where: {},
            order: {
                number: 'desc'
            }
        });
    }
    async deleteBlock(hash) {
        const db = await this.datasource;
        await db.getRepository(BlockEntity).delete({
            hash
        });
    }
    async blocksCount() {
        const db = await this.datasource;
        return db.getRepository(BlockEntity).count();
    }
    async saveStorage(blockHash, key, value) {
        const db = await this.datasource;
        await db.getRepository(KeyValuePair).upsert({
            blockHash,
            key,
            value
        }, [
            'blockHash',
            'key'
        ]);
    }
    async queryStorage(blockHash, key) {
        const db = await this.datasource;
        return db.getRepository(KeyValuePair).findOne({
            where: {
                blockHash,
                key
            }
        });
    }
}
