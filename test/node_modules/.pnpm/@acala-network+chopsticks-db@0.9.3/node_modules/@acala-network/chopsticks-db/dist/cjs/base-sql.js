"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BaseSqlDatabase", {
    enumerable: true,
    get: function() {
        return BaseSqlDatabase;
    }
});
const _entities = require("./db/entities.js");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class BaseSqlDatabase {
    async saveBlock(block) {
        const db = await this.datasource;
        const { hash, number, header, extrinsics, parentHash, storageDiff } = block;
        await db.transaction(async (transactionalEntityManager)=>{
            await transactionalEntityManager.getRepository(_entities.BlockEntity).delete({
                number
            });
            await transactionalEntityManager.getRepository(_entities.BlockEntity).upsert({
                hash,
                number,
                header,
                extrinsics,
                parentHash,
                storageDiff
            }, [
                'hash'
            ]);
        });
    }
    async queryBlock(hash) {
        const db = await this.datasource;
        return db.getRepository(_entities.BlockEntity).findOne({
            where: {
                hash
            }
        });
    }
    async queryBlockByNumber(number) {
        const db = await this.datasource;
        return db.getRepository(_entities.BlockEntity).findOne({
            where: {
                number
            },
            order: {
                number: 'desc'
            }
        });
    }
    async queryHighestBlock() {
        const db = await this.datasource;
        return db.getRepository(_entities.BlockEntity).findOne({
            where: {},
            order: {
                number: 'desc'
            }
        });
    }
    async deleteBlock(hash) {
        const db = await this.datasource;
        await db.getRepository(_entities.BlockEntity).delete({
            hash
        });
    }
    async blocksCount() {
        const db = await this.datasource;
        return db.getRepository(_entities.BlockEntity).count();
    }
    async saveStorage(blockHash, key, value) {
        const db = await this.datasource;
        await db.getRepository(_entities.KeyValuePair).upsert({
            blockHash,
            key,
            value
        }, [
            'blockHash',
            'key'
        ]);
    }
    async queryStorage(blockHash, key) {
        const db = await this.datasource;
        return db.getRepository(_entities.KeyValuePair).findOne({
            where: {
                blockHash,
                key
            }
        });
    }
    constructor(){
        _define_property(this, "close", async ()=>{
            const db = await this.datasource;
            await db.destroy();
        });
    }
}
