var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/functions/contracts.ts
var contracts_exports = {};
__export(contracts_exports, {
  getAllCompiledContracts: () => getAllCompiledContracts,
  getCompiled: () => getCompiled
});
module.exports = __toCommonJS(contracts_exports);
var import_fs = __toESM(require("fs"), 1);
var import_path = __toESM(require("path"), 1);
function getAllCompiledContracts(contractsDir = "./", recurse = false) {
  const contractsPath = import_path.default.isAbsolute(contractsDir) ? contractsDir : import_path.default.join(process.cwd(), contractsDir);
  const contracts = import_fs.default.readdirSync(contractsPath, { withFileTypes: true });
  let contractNames = [];
  contracts.forEach((dirent) => {
    const fullDirentPath = import_path.default.join(contractsPath, dirent.name);
    if (dirent.isDirectory() && recurse) {
      contractNames = contractNames.concat(getAllCompiledContracts(fullDirentPath, recurse));
    } else if (dirent.isFile() && import_path.default.extname(dirent.name) === ".json") {
      contractNames.push(import_path.default.basename(dirent.name, ".json"));
    }
  });
  return contractNames;
}
function getCompiled(contractPath) {
  const filePath = import_path.default.join(process.cwd(), `${contractPath}.json`);
  if (!import_fs.default.existsSync(filePath)) {
    throw new Error(`Contract name (${contractPath}) doesn't exist in test suite`);
  }
  try {
    const json = import_fs.default.readFileSync(filePath, "utf8");
    return JSON.parse(json);
  } catch (e) {
    throw new Error(
      `Contract name ${contractPath} is not compiled. Please check compiled json exists`
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAllCompiledContracts,
  getCompiled
});
