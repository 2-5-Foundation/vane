import {
  ALITH_ADDRESS
} from "./chunk-2G7GFRQC.js";

// src/functions/ethers.ts
import { Wallet } from "ethers";
var transactionHandlers = {
  legacy: (blob, params) => {
    blob["gasPrice"] = params.gasPrice || 1e10;
    blob["gasLimit"] = params.gasLimit || 2e5;
    blob["type"] = 0;
  },
  eip2930: (blob, params) => {
    blob["gasPrice"] = params.gasPrice || 1e10;
    blob["gasLimit"] = params.gasLimit || 2e5;
    blob["accessList"] = params.accessList || [];
    blob["type"] = 1;
  },
  eip1559: (blob, params) => {
    blob["accessList"] = params.accessList || [];
    blob["maxFeePerGas"] = params.maxFeePerGas || 1e10;
    blob["maxPriorityFeePerGas"] = params.maxPriorityFeePerGas || 0;
    blob["gasLimit"] = params.gasLimit || 2e5;
    blob["type"] = 2;
  }
};
async function createEthersTransaction(context, params) {
  const nonce = "nonce" in params ? params.nonce : await context.viem().getTransactionCount({ address: ALITH_ADDRESS });
  const blob = { nonce, ...params };
  const handler = transactionHandlers[params.txnType || "legacy"];
  if (!handler) {
    throw new Error("Unknown transaction type, update createRawEthersTxn fn");
  }
  handler(blob, params);
  const signer = params.privateKey ? new Wallet(params.privateKey, context.ethers().provider) : context.ethers();
  const txn = await signer.populateTransaction(blob);
  return await signer.signTransaction(txn);
}

export {
  createEthersTransaction
};
