import * as _polkadot_types from '@polkadot/types';
import { u64, Option, u32 } from '@polkadot/types';
import { ApiPromise } from '@polkadot/api';
import { TxWithEvent } from '@polkadot/api-derive/types';
import { ITuple } from '@polkadot/types-codec/types';
import { RuntimeDispatchInfo, RuntimeDispatchInfoV1, BlockHash, Extrinsic, Event } from '@polkadot/types/interfaces';
import { Block, SignedBlock } from '@polkadot/types/interfaces/runtime/types';
import { SpWeightsWeightV2Weight, FrameSystemEventRecord } from '@polkadot/types/lookup';
import Bottleneck from 'bottleneck';

declare function createAndFinalizeBlock(api: ApiPromise, parentHash?: string, finalize?: boolean): Promise<{
    duration: number;
    hash: string;
    proofSize?: number;
}>;
declare function calculateFeePortions(amount: bigint): {
    burnt: bigint;
    treasury: bigint;
};
interface TxWithEventAndFee extends TxWithEvent {
    fee: RuntimeDispatchInfo | RuntimeDispatchInfoV1 | undefined;
}
interface BlockDetails {
    block: Block;
    txWithEvents: TxWithEventAndFee[];
}
interface BlockRangeOption {
    from: number;
    to: number;
    concurrency?: number;
}
declare const getBlockExtrinsic: (api: ApiPromise, blockHash: string | BlockHash, section: string, method: string) => Promise<{
    block: SignedBlock | any;
    extrinsic: Extrinsic | null | any;
    events: Event[];
    resultEvent: Event | undefined;
}>;
declare const getBlockTime: (signedBlock: any) => any;
declare const checkBlockFinalized: (api: ApiPromise, number: number) => Promise<{
    number: number;
    finalized: any;
}>;
declare const fetchHistoricBlockNum: (api: ApiPromise, blockNumber: number, targetTime: number) => any;
declare const getBlockArray: (api: ApiPromise, timePeriod: number, limiter?: Bottleneck) => Promise<number[]>;
declare function extractWeight(weightV1OrV2: u64 | Option<u64> | SpWeightsWeightV2Weight | Option<any>): any;
declare function extractPreimageDeposit(request: Option<ITuple<any>> | {
    readonly deposit: ITuple<any>;
    readonly len: u32;
} | {
    readonly deposit: Option<ITuple<any>>;
    readonly count: u32;
    readonly len: Option<u32>;
}): {
    accountId: any;
    amount: any;
};
declare function mapExtrinsics(extrinsics: Extrinsic[], records: FrameSystemEventRecord[], fees?: RuntimeDispatchInfo[] | RuntimeDispatchInfoV1[]): TxWithEventAndFee[];
declare function checkTimeSliceForUpgrades(api: ApiPromise, blockNumbers: number[], currentVersion: u32): Promise<{
    result: boolean;
    specVersion: _polkadot_types.Compact<u32>;
}>;

export { type BlockDetails, type BlockRangeOption, type TxWithEventAndFee, calculateFeePortions, checkBlockFinalized, checkTimeSliceForUpgrades, createAndFinalizeBlock, extractPreimageDeposit, extractWeight, fetchHistoricBlockNum, getBlockArray, getBlockExtrinsic, getBlockTime, mapExtrinsics };
