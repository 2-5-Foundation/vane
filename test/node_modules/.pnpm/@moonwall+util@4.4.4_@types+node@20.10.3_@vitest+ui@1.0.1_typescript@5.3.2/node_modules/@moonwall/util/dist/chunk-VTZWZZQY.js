import {
  ALITH_ADDRESS,
  ALITH_PRIVATE_KEY
} from "./chunk-2G7GFRQC.js";
import {
  directRpcRequest
} from "./chunk-BTIOI3I7.js";

// src/functions/viem.ts
import {
  createWalletClient,
  hexToNumber,
  http
} from "viem";
import { setTimeout as timer } from "timers/promises";
import { privateKeyToAccount } from "viem/accounts";
async function getDevChain(url) {
  const httpUrl = url.replace("ws", "http");
  const block = { http: [httpUrl] };
  return {
    id: 1281,
    name: "Moonbeam Dev",
    network: "moonbeam",
    nativeCurrency: {
      decimals: 18,
      name: "Glimmer",
      symbol: "GLMR"
    },
    rpcUrls: {
      public: block,
      default: block
    }
  };
}
async function deriveViemChain(endpoint) {
  const httpEndpoint = endpoint.replace("ws", "http");
  const block = { http: [httpEndpoint] };
  const id = hexToNumber(await directRpcRequest(httpEndpoint, "eth_chainId"));
  const name = await directRpcRequest(httpEndpoint, "system_chain");
  const { tokenSymbol, tokenDecimals } = await directRpcRequest(httpEndpoint, "system_properties");
  return {
    id,
    name,
    network: name,
    nativeCurrency: {
      decimals: tokenDecimals,
      name: tokenSymbol,
      symbol: tokenSymbol
    },
    rpcUrls: {
      public: block,
      default: block
    }
  };
}
async function deployViemContract(context, abi, bytecode, options) {
  const url = context.viem().transport.url;
  const { privateKey = ALITH_PRIVATE_KEY, ...rest } = options || {};
  const blob = { ...rest, abi, bytecode, account: privateKeyToAccount(privateKey) };
  const account = privateKeyToAccount(ALITH_PRIVATE_KEY);
  const client = createWalletClient({
    transport: http(url),
    account,
    chain: await deriveViemChain(url)
  });
  const hash = await client.deployContract(blob);
  await context.createBlock();
  for (let i = 0; i < 5; i++) {
    try {
      const { contractAddress, status, logs } = await context.viem().getTransactionReceipt({ hash });
      return { contractAddress, status, logs, hash };
    } catch (e) {
      console.log(e.message);
      console.log("Contract deployment query, retrying...");
      await timer(100);
      continue;
    }
  }
  throw new Error("Contract deployment query failed after 5 retries");
}
async function createRawTransfer(context, to, value, options) {
  const transferAmount = typeof value === "bigint" ? value : BigInt(value);
  return await createViemTransaction(context, { ...options, to, value: transferAmount });
}
async function createViemTransaction(context, options) {
  const type = !!options && !!options.txnType ? options.txnType : "eip1559";
  const privateKey = !!options && !!options.privateKey ? options.privateKey : ALITH_PRIVATE_KEY;
  const account = privateKeyToAccount(privateKey);
  const value = options && options.value ? options.value : 0n;
  const to = options && options.to ? options.to : "0x0000000000000000000000000000000000000000";
  const chainId = await context.viem().getChainId();
  const txnCount = await context.viem().getTransactionCount({ address: account.address });
  const gasPrice = await context.viem().getGasPrice();
  const data = options && options.data ? options.data : "0x";
  const estimatedGas = options.skipEstimation || options.gas !== void 0 ? 1500000n : await context.viem().estimateGas({ account: account.address, to, value, data });
  const accessList = options && options.accessList ? options.accessList : [];
  const txnBlob = type === "eip1559" ? {
    to,
    value,
    maxFeePerGas: options.maxFeePerGas !== void 0 ? options.maxFeePerGas : gasPrice,
    maxPriorityFeePerGas: options.maxPriorityFeePerGas !== void 0 ? options.maxPriorityFeePerGas : gasPrice,
    gas: options.gas !== void 0 ? options.gas : estimatedGas,
    nonce: options.nonce !== void 0 ? options.nonce : txnCount,
    data,
    chainId,
    type
  } : type === "legacy" ? {
    to,
    value,
    gasPrice: options.gasPrice !== void 0 ? options.gasPrice : gasPrice,
    gas: options.gas !== void 0 ? options.gas : estimatedGas,
    nonce: options.nonce !== void 0 ? options.nonce : txnCount,
    data
  } : type === "eip2930" ? {
    to,
    value,
    gasPrice: options.gasPrice !== void 0 ? options.gasPrice : gasPrice,
    gas: options.gas !== void 0 ? options.gas : estimatedGas,
    nonce: options.nonce !== void 0 ? options.nonce : txnCount,
    data,
    chainId,
    type
  } : {};
  if (type !== "legacy" && accessList.length > 0) {
    txnBlob["accessList"] = accessList;
  }
  return await account.signTransaction(txnBlob);
}
async function checkBalance(context, account = ALITH_ADDRESS, block = "latest") {
  return typeof block == "string" ? await context.viem().getBalance({ address: account, blockTag: block }) : typeof block == "bigint" ? await context.viem().getBalance({ address: account, blockNumber: block }) : await context.viem().getBalance({ address: account });
}
async function sendRawTransaction(context, rawTx) {
  return await context.viem().request({ method: "eth_sendRawTransaction", params: [rawTx] });
}

export {
  getDevChain,
  deriveViemChain,
  deployViemContract,
  createRawTransfer,
  createViemTransaction,
  checkBalance,
  sendRawTransaction
};
