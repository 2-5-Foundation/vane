declare const _default: {
    /** Lookup3: frame_system::AccountInfo<Nonce, pallet_balances::types::AccountData<Balance>> */
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /** Lookup5: pallet_balances::types::AccountData<Balance> */
    PalletBalancesAccountData: {
        free: string;
        reserved: string;
        frozen: string;
        flags: string;
    };
    /** Lookup8: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight> */
    FrameSupportDispatchPerDispatchClassWeight: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /** Lookup9: sp_weights::weight_v2::Weight */
    SpWeightsWeightV2Weight: {
        refTime: string;
        proofSize: string;
    };
    /** Lookup15: sp_runtime::generic::digest::Digest */
    SpRuntimeDigest: {
        logs: string;
    };
    /** Lookup17: sp_runtime::generic::digest::DigestItem */
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /** Lookup20: frame_system::EventRecord<moonbase_runtime::RuntimeEvent, primitive_types::H256> */
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /** Lookup22: frame_system::pallet::Event<T> */
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /** Lookup23: frame_support::dispatch::DispatchInfo */
    FrameSupportDispatchDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /** Lookup24: frame_support::dispatch::DispatchClass */
    FrameSupportDispatchDispatchClass: {
        _enum: string[];
    };
    /** Lookup25: frame_support::dispatch::Pays */
    FrameSupportDispatchPays: {
        _enum: string[];
    };
    /** Lookup26: sp_runtime::DispatchError */
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
            Exhausted: string;
            Corruption: string;
            Unavailable: string;
            RootNotAllowed: string;
        };
    };
    /** Lookup27: sp_runtime::ModuleError */
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /** Lookup28: sp_runtime::TokenError */
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /** Lookup29: sp_arithmetic::ArithmeticError */
    SpArithmeticArithmeticError: {
        _enum: string[];
    };
    /** Lookup30: sp_runtime::TransactionalError */
    SpRuntimeTransactionalError: {
        _enum: string[];
    };
    /** Lookup31: pallet_utility::pallet::Event */
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            BatchCompletedWithErrors: string;
            ItemCompleted: string;
            ItemFailed: {
                error: string;
            };
            DispatchedAs: {
                result: string;
            };
        };
    };
    /** Lookup34: pallet_balances::pallet::Event<T, I> */
    PalletBalancesEvent: {
        _enum: {
            Endowed: {
                account: string;
                freeBalance: string;
            };
            DustLost: {
                account: string;
                amount: string;
            };
            Transfer: {
                from: string;
                to: string;
                amount: string;
            };
            BalanceSet: {
                who: string;
                free: string;
            };
            Reserved: {
                who: string;
                amount: string;
            };
            Unreserved: {
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                from: string;
                to: string;
                amount: string;
                destinationStatus: string;
            };
            Deposit: {
                who: string;
                amount: string;
            };
            Withdraw: {
                who: string;
                amount: string;
            };
            Slashed: {
                who: string;
                amount: string;
            };
            Minted: {
                who: string;
                amount: string;
            };
            Burned: {
                who: string;
                amount: string;
            };
            Suspended: {
                who: string;
                amount: string;
            };
            Restored: {
                who: string;
                amount: string;
            };
            Upgraded: {
                who: string;
            };
            Issued: {
                amount: string;
            };
            Rescinded: {
                amount: string;
            };
            Locked: {
                who: string;
                amount: string;
            };
            Unlocked: {
                who: string;
                amount: string;
            };
            Frozen: {
                who: string;
                amount: string;
            };
            Thawed: {
                who: string;
                amount: string;
            };
        };
    };
    /** Lookup35: frame_support::traits::tokens::misc::BalanceStatus */
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /** Lookup36: pallet_sudo::pallet::Event<T> */
    PalletSudoEvent: {
        _enum: {
            Sudid: {
                sudoResult: string;
            };
            KeyChanged: {
                oldSudoer: string;
            };
            SudoAsDone: {
                sudoResult: string;
            };
        };
    };
    /** Lookup38: cumulus_pallet_parachain_system::pallet::Event<T> */
    CumulusPalletParachainSystemEvent: {
        _enum: {
            ValidationFunctionStored: string;
            ValidationFunctionApplied: {
                relayChainBlockNum: string;
            };
            ValidationFunctionDiscarded: string;
            UpgradeAuthorized: {
                codeHash: string;
            };
            DownwardMessagesReceived: {
                count: string;
            };
            DownwardMessagesProcessed: {
                weightUsed: string;
                dmqHead: string;
            };
            UpwardMessageSent: {
                messageHash: string;
            };
        };
    };
    /** Lookup40: pallet_transaction_payment::pallet::Event<T> */
    PalletTransactionPaymentEvent: {
        _enum: {
            TransactionFeePaid: {
                who: string;
                actualFee: string;
                tip: string;
            };
        };
    };
    /** Lookup41: pallet_evm::pallet::Event<T> */
    PalletEvmEvent: {
        _enum: {
            Log: {
                log: string;
            };
            Created: {
                address: string;
            };
            CreatedFailed: {
                address: string;
            };
            Executed: {
                address: string;
            };
            ExecutedFailed: {
                address: string;
            };
        };
    };
    /** Lookup42: ethereum::log::Log */
    EthereumLog: {
        address: string;
        topics: string;
        data: string;
    };
    /** Lookup45: pallet_ethereum::pallet::Event */
    PalletEthereumEvent: {
        _enum: {
            Executed: {
                from: string;
                to: string;
                transactionHash: string;
                exitReason: string;
                extraData: string;
            };
        };
    };
    /** Lookup46: evm_core::error::ExitReason */
    EvmCoreErrorExitReason: {
        _enum: {
            Succeed: string;
            Error: string;
            Revert: string;
            Fatal: string;
        };
    };
    /** Lookup47: evm_core::error::ExitSucceed */
    EvmCoreErrorExitSucceed: {
        _enum: string[];
    };
    /** Lookup48: evm_core::error::ExitError */
    EvmCoreErrorExitError: {
        _enum: {
            StackUnderflow: string;
            StackOverflow: string;
            InvalidJump: string;
            InvalidRange: string;
            DesignatedInvalid: string;
            CallTooDeep: string;
            CreateCollision: string;
            CreateContractLimit: string;
            OutOfOffset: string;
            OutOfGas: string;
            OutOfFund: string;
            PCUnderflow: string;
            CreateEmpty: string;
            Other: string;
            MaxNonce: string;
            InvalidCode: string;
        };
    };
    /** Lookup52: evm_core::error::ExitRevert */
    EvmCoreErrorExitRevert: {
        _enum: string[];
    };
    /** Lookup53: evm_core::error::ExitFatal */
    EvmCoreErrorExitFatal: {
        _enum: {
            NotSupported: string;
            UnhandledInterrupt: string;
            CallErrorAsFatal: string;
            Other: string;
        };
    };
    /** Lookup54: pallet_parachain_staking::pallet::Event<T> */
    PalletParachainStakingEvent: {
        _enum: {
            NewRound: {
                startingBlock: string;
                round: string;
                selectedCollatorsNumber: string;
                totalBalance: string;
            };
            JoinedCollatorCandidates: {
                account: string;
                amountLocked: string;
                newTotalAmtLocked: string;
            };
            CollatorChosen: {
                round: string;
                collatorAccount: string;
                totalExposedAmount: string;
            };
            CandidateBondLessRequested: {
                candidate: string;
                amountToDecrease: string;
                executeRound: string;
            };
            CandidateBondedMore: {
                candidate: string;
                amount: string;
                newTotalBond: string;
            };
            CandidateBondedLess: {
                candidate: string;
                amount: string;
                newBond: string;
            };
            CandidateWentOffline: {
                candidate: string;
            };
            CandidateBackOnline: {
                candidate: string;
            };
            CandidateScheduledExit: {
                exitAllowedRound: string;
                candidate: string;
                scheduledExit: string;
            };
            CancelledCandidateExit: {
                candidate: string;
            };
            CancelledCandidateBondLess: {
                candidate: string;
                amount: string;
                executeRound: string;
            };
            CandidateLeft: {
                exCandidate: string;
                unlockedAmount: string;
                newTotalAmtLocked: string;
            };
            DelegationDecreaseScheduled: {
                delegator: string;
                candidate: string;
                amountToDecrease: string;
                executeRound: string;
            };
            DelegationIncreased: {
                delegator: string;
                candidate: string;
                amount: string;
                inTop: string;
            };
            DelegationDecreased: {
                delegator: string;
                candidate: string;
                amount: string;
                inTop: string;
            };
            DelegatorExitScheduled: {
                round: string;
                delegator: string;
                scheduledExit: string;
            };
            DelegationRevocationScheduled: {
                round: string;
                delegator: string;
                candidate: string;
                scheduledExit: string;
            };
            DelegatorLeft: {
                delegator: string;
                unstakedAmount: string;
            };
            DelegationRevoked: {
                delegator: string;
                candidate: string;
                unstakedAmount: string;
            };
            DelegationKicked: {
                delegator: string;
                candidate: string;
                unstakedAmount: string;
            };
            DelegatorExitCancelled: {
                delegator: string;
            };
            CancelledDelegationRequest: {
                delegator: string;
                cancelledRequest: string;
                collator: string;
            };
            Delegation: {
                delegator: string;
                lockedAmount: string;
                candidate: string;
                delegatorPosition: string;
                autoCompound: string;
            };
            DelegatorLeftCandidate: {
                delegator: string;
                candidate: string;
                unstakedAmount: string;
                totalCandidateStaked: string;
            };
            Rewarded: {
                account: string;
                rewards: string;
            };
            ReservedForParachainBond: {
                account: string;
                value: string;
            };
            ParachainBondAccountSet: {
                _alias: {
                    new_: string;
                };
                old: string;
                new_: string;
            };
            ParachainBondReservePercentSet: {
                _alias: {
                    new_: string;
                };
                old: string;
                new_: string;
            };
            InflationSet: {
                annualMin: string;
                annualIdeal: string;
                annualMax: string;
                roundMin: string;
                roundIdeal: string;
                roundMax: string;
            };
            StakeExpectationsSet: {
                expectMin: string;
                expectIdeal: string;
                expectMax: string;
            };
            TotalSelectedSet: {
                _alias: {
                    new_: string;
                };
                old: string;
                new_: string;
            };
            CollatorCommissionSet: {
                _alias: {
                    new_: string;
                };
                old: string;
                new_: string;
            };
            BlocksPerRoundSet: {
                _alias: {
                    new_: string;
                };
                currentRound: string;
                firstBlock: string;
                old: string;
                new_: string;
                newPerRoundInflationMin: string;
                newPerRoundInflationIdeal: string;
                newPerRoundInflationMax: string;
            };
            AutoCompoundSet: {
                candidate: string;
                delegator: string;
                value: string;
            };
            Compounded: {
                candidate: string;
                delegator: string;
                amount: string;
            };
        };
    };
    /** Lookup56: pallet_parachain_staking::delegation_requests::CancelledScheduledRequest<Balance> */
    PalletParachainStakingDelegationRequestsCancelledScheduledRequest: {
        whenExecutable: string;
        action: string;
    };
    /** Lookup57: pallet_parachain_staking::delegation_requests::DelegationAction<Balance> */
    PalletParachainStakingDelegationRequestsDelegationAction: {
        _enum: {
            Revoke: string;
            Decrease: string;
        };
    };
    /** Lookup58: pallet_parachain_staking::types::DelegatorAdded<B> */
    PalletParachainStakingDelegatorAdded: {
        _enum: {
            AddedToTop: {
                newTotal: string;
            };
            AddedToBottom: string;
        };
    };
    /** Lookup61: pallet_scheduler::pallet::Event<T> */
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: {
                when: string;
                index: string;
            };
            Canceled: {
                when: string;
                index: string;
            };
            Dispatched: {
                task: string;
                id: string;
                result: string;
            };
            CallUnavailable: {
                task: string;
                id: string;
            };
            PeriodicFailed: {
                task: string;
                id: string;
            };
            PermanentlyOverweight: {
                task: string;
                id: string;
            };
        };
    };
    /** Lookup63: pallet_democracy::pallet::Event<T> */
    PalletDemocracyEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
                deposit: string;
            };
            Tabled: {
                proposalIndex: string;
                deposit: string;
            };
            ExternalTabled: string;
            Started: {
                refIndex: string;
                threshold: string;
            };
            Passed: {
                refIndex: string;
            };
            NotPassed: {
                refIndex: string;
            };
            Cancelled: {
                refIndex: string;
            };
            Delegated: {
                who: string;
                target: string;
            };
            Undelegated: {
                account: string;
            };
            Vetoed: {
                who: string;
                proposalHash: string;
                until: string;
            };
            Blacklisted: {
                proposalHash: string;
            };
            Voted: {
                voter: string;
                refIndex: string;
                vote: string;
            };
            Seconded: {
                seconder: string;
                propIndex: string;
            };
            ProposalCanceled: {
                propIndex: string;
            };
            MetadataSet: {
                _alias: {
                    hash_: string;
                };
                owner: string;
                hash_: string;
            };
            MetadataCleared: {
                _alias: {
                    hash_: string;
                };
                owner: string;
                hash_: string;
            };
            MetadataTransferred: {
                _alias: {
                    hash_: string;
                };
                prevOwner: string;
                owner: string;
                hash_: string;
            };
        };
    };
    /** Lookup64: pallet_democracy::vote_threshold::VoteThreshold */
    PalletDemocracyVoteThreshold: {
        _enum: string[];
    };
    /** Lookup65: pallet_democracy::vote::AccountVote<Balance> */
    PalletDemocracyVoteAccountVote: {
        _enum: {
            Standard: {
                vote: string;
                balance: string;
            };
            Split: {
                aye: string;
                nay: string;
            };
        };
    };
    /** Lookup67: pallet_democracy::types::MetadataOwner */
    PalletDemocracyMetadataOwner: {
        _enum: {
            External: string;
            Proposal: string;
            Referendum: string;
        };
    };
    /** Lookup68: pallet_collective::pallet::Event<T, I> */
    PalletCollectiveEvent: {
        _enum: {
            Proposed: {
                account: string;
                proposalIndex: string;
                proposalHash: string;
                threshold: string;
            };
            Voted: {
                account: string;
                proposalHash: string;
                voted: string;
                yes: string;
                no: string;
            };
            Approved: {
                proposalHash: string;
            };
            Disapproved: {
                proposalHash: string;
            };
            Executed: {
                proposalHash: string;
                result: string;
            };
            MemberExecuted: {
                proposalHash: string;
                result: string;
            };
            Closed: {
                proposalHash: string;
                yes: string;
                no: string;
            };
        };
    };
    /** Lookup70: pallet_treasury::pallet::Event<T, I> */
    PalletTreasuryEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
            };
            Spending: {
                budgetRemaining: string;
            };
            Awarded: {
                proposalIndex: string;
                award: string;
                account: string;
            };
            Rejected: {
                proposalIndex: string;
                slashed: string;
            };
            Burnt: {
                burntFunds: string;
            };
            Rollover: {
                rolloverBalance: string;
            };
            Deposit: {
                value: string;
            };
            SpendApproved: {
                proposalIndex: string;
                amount: string;
                beneficiary: string;
            };
            UpdatedInactive: {
                reactivated: string;
                deactivated: string;
            };
        };
    };
    /** Lookup71: pallet_author_slot_filter::pallet::Event */
    PalletAuthorSlotFilterEvent: {
        _enum: {
            EligibleUpdated: string;
        };
    };
    /** Lookup73: pallet_crowdloan_rewards::pallet::Event<T> */
    PalletCrowdloanRewardsEvent: {
        _enum: {
            InitialPaymentMade: string;
            NativeIdentityAssociated: string;
            RewardsPaid: string;
            RewardAddressUpdated: string;
            InitializedAlreadyInitializedAccount: string;
            InitializedAccountWithNotEnoughContribution: string;
        };
    };
    /** Lookup74: pallet_author_mapping::pallet::Event<T> */
    PalletAuthorMappingEvent: {
        _enum: {
            KeysRegistered: {
                _alias: {
                    keys_: string;
                };
                nimbusId: string;
                accountId: string;
                keys_: string;
            };
            KeysRemoved: {
                _alias: {
                    keys_: string;
                };
                nimbusId: string;
                accountId: string;
                keys_: string;
            };
            KeysRotated: {
                newNimbusId: string;
                accountId: string;
                newKeys: string;
            };
        };
    };
    /** Lookup75: nimbus_primitives::nimbus_crypto::Public */
    NimbusPrimitivesNimbusCryptoPublic: string;
    /** Lookup76: sp_core::sr25519::Public */
    SpCoreSr25519Public: string;
    /** Lookup77: session_keys_primitives::vrf::vrf_crypto::Public */
    SessionKeysPrimitivesVrfVrfCryptoPublic: string;
    /** Lookup78: pallet_proxy::pallet::Event<T> */
    PalletProxyEvent: {
        _enum: {
            ProxyExecuted: {
                result: string;
            };
            PureCreated: {
                pure: string;
                who: string;
                proxyType: string;
                disambiguationIndex: string;
            };
            Announced: {
                real: string;
                proxy: string;
                callHash: string;
            };
            ProxyAdded: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
            ProxyRemoved: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
        };
    };
    /** Lookup79: moonbase_runtime::ProxyType */
    MoonbaseRuntimeProxyType: {
        _enum: string[];
    };
    /** Lookup81: pallet_maintenance_mode::pallet::Event */
    PalletMaintenanceModeEvent: {
        _enum: {
            EnteredMaintenanceMode: string;
            NormalOperationResumed: string;
            FailedToSuspendIdleXcmExecution: {
                error: string;
            };
            FailedToResumeIdleXcmExecution: {
                error: string;
            };
        };
    };
    /** Lookup82: pallet_identity::pallet::Event<T> */
    PalletIdentityEvent: {
        _enum: {
            IdentitySet: {
                who: string;
            };
            IdentityCleared: {
                who: string;
                deposit: string;
            };
            IdentityKilled: {
                who: string;
                deposit: string;
            };
            JudgementRequested: {
                who: string;
                registrarIndex: string;
            };
            JudgementUnrequested: {
                who: string;
                registrarIndex: string;
            };
            JudgementGiven: {
                target: string;
                registrarIndex: string;
            };
            RegistrarAdded: {
                registrarIndex: string;
            };
            SubIdentityAdded: {
                sub: string;
                main: string;
                deposit: string;
            };
            SubIdentityRemoved: {
                sub: string;
                main: string;
                deposit: string;
            };
            SubIdentityRevoked: {
                sub: string;
                main: string;
                deposit: string;
            };
        };
    };
    /** Lookup83: cumulus_pallet_xcmp_queue::pallet::Event<T> */
    CumulusPalletXcmpQueueEvent: {
        _enum: {
            Success: {
                messageHash: string;
                messageId: string;
                weight: string;
            };
            Fail: {
                messageHash: string;
                messageId: string;
                error: string;
                weight: string;
            };
            BadVersion: {
                messageHash: string;
            };
            BadFormat: {
                messageHash: string;
            };
            XcmpMessageSent: {
                messageHash: string;
            };
            OverweightEnqueued: {
                sender: string;
                sentAt: string;
                index: string;
                required: string;
            };
            OverweightServiced: {
                index: string;
                used: string;
            };
        };
    };
    /** Lookup84: staging_xcm::v3::traits::Error */
    StagingXcmV3TraitsError: {
        _enum: {
            Overflow: string;
            Unimplemented: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            LocationFull: string;
            LocationNotInvertible: string;
            BadOrigin: string;
            InvalidLocation: string;
            AssetNotFound: string;
            FailedToTransactAsset: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            ExceedsMaxMessageSize: string;
            DestinationUnsupported: string;
            Transport: string;
            Unroutable: string;
            UnknownClaim: string;
            FailedToDecode: string;
            MaxWeightInvalid: string;
            NotHoldingFees: string;
            TooExpensive: string;
            Trap: string;
            ExpectationFalse: string;
            PalletNotFound: string;
            NameMismatch: string;
            VersionIncompatible: string;
            HoldingWouldOverflow: string;
            ExportError: string;
            ReanchorFailed: string;
            NoDeal: string;
            FeesNotMet: string;
            LockError: string;
            NoPermission: string;
            Unanchored: string;
            NotDepositable: string;
            UnhandledXcmVersion: string;
            WeightLimitReached: string;
            Barrier: string;
            WeightNotComputable: string;
            ExceedsStackLimit: string;
        };
    };
    /** Lookup86: cumulus_pallet_xcm::pallet::Event<T> */
    CumulusPalletXcmEvent: {
        _enum: {
            InvalidFormat: string;
            UnsupportedVersion: string;
            ExecutedDownward: string;
        };
    };
    /** Lookup87: staging_xcm::v3::traits::Outcome */
    StagingXcmV3TraitsOutcome: {
        _enum: {
            Complete: string;
            Incomplete: string;
            Error: string;
        };
    };
    /** Lookup88: cumulus_pallet_dmp_queue::pallet::Event<T> */
    CumulusPalletDmpQueueEvent: {
        _enum: {
            InvalidFormat: {
                messageHash: string;
            };
            UnsupportedVersion: {
                messageHash: string;
            };
            ExecutedDownward: {
                messageHash: string;
                messageId: string;
                outcome: string;
            };
            WeightExhausted: {
                messageHash: string;
                messageId: string;
                remainingWeight: string;
                requiredWeight: string;
            };
            OverweightEnqueued: {
                messageHash: string;
                messageId: string;
                overweightIndex: string;
                requiredWeight: string;
            };
            OverweightServiced: {
                overweightIndex: string;
                weightUsed: string;
            };
            MaxMessagesExhausted: {
                messageHash: string;
            };
        };
    };
    /** Lookup89: pallet_xcm::pallet::Event<T> */
    PalletXcmEvent: {
        _enum: {
            Attempted: {
                outcome: string;
            };
            Sent: {
                origin: string;
                destination: string;
                message: string;
                messageId: string;
            };
            UnexpectedResponse: {
                origin: string;
                queryId: string;
            };
            ResponseReady: {
                queryId: string;
                response: string;
            };
            Notified: {
                queryId: string;
                palletIndex: string;
                callIndex: string;
            };
            NotifyOverweight: {
                queryId: string;
                palletIndex: string;
                callIndex: string;
                actualWeight: string;
                maxBudgetedWeight: string;
            };
            NotifyDispatchError: {
                queryId: string;
                palletIndex: string;
                callIndex: string;
            };
            NotifyDecodeFailed: {
                queryId: string;
                palletIndex: string;
                callIndex: string;
            };
            InvalidResponder: {
                origin: string;
                queryId: string;
                expectedLocation: string;
            };
            InvalidResponderVersion: {
                origin: string;
                queryId: string;
            };
            ResponseTaken: {
                queryId: string;
            };
            AssetsTrapped: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                origin: string;
                assets: string;
            };
            VersionChangeNotified: {
                destination: string;
                result: string;
                cost: string;
                messageId: string;
            };
            SupportedVersionChanged: {
                location: string;
                version: string;
            };
            NotifyTargetSendFail: {
                location: string;
                queryId: string;
                error: string;
            };
            NotifyTargetMigrationFail: {
                location: string;
                queryId: string;
            };
            InvalidQuerierVersion: {
                origin: string;
                queryId: string;
            };
            InvalidQuerier: {
                origin: string;
                queryId: string;
                expectedQuerier: string;
                maybeActualQuerier: string;
            };
            VersionNotifyStarted: {
                destination: string;
                cost: string;
                messageId: string;
            };
            VersionNotifyRequested: {
                destination: string;
                cost: string;
                messageId: string;
            };
            VersionNotifyUnrequested: {
                destination: string;
                cost: string;
                messageId: string;
            };
            FeesPaid: {
                paying: string;
                fees: string;
            };
            AssetsClaimed: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                origin: string;
                assets: string;
            };
        };
    };
    /** Lookup90: staging_xcm::v3::multilocation::MultiLocation */
    StagingXcmV3MultiLocation: {
        parents: string;
        interior: string;
    };
    /** Lookup91: staging_xcm::v3::junctions::Junctions */
    StagingXcmV3Junctions: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /** Lookup92: staging_xcm::v3::junction::Junction */
    StagingXcmV3Junction: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: {
                length: string;
                data: string;
            };
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
            GlobalConsensus: string;
        };
    };
    /** Lookup95: staging_xcm::v3::junction::NetworkId */
    StagingXcmV3JunctionNetworkId: {
        _enum: {
            ByGenesis: string;
            ByFork: {
                blockNumber: string;
                blockHash: string;
            };
            Polkadot: string;
            Kusama: string;
            Westend: string;
            Rococo: string;
            Wococo: string;
            Ethereum: {
                chainId: string;
            };
            BitcoinCore: string;
            BitcoinCash: string;
        };
    };
    /** Lookup97: staging_xcm::v3::junction::BodyId */
    StagingXcmV3JunctionBodyId: {
        _enum: {
            Unit: string;
            Moniker: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
            Defense: string;
            Administration: string;
            Treasury: string;
        };
    };
    /** Lookup98: staging_xcm::v3::junction::BodyPart */
    StagingXcmV3JunctionBodyPart: {
        _enum: {
            Voice: string;
            Members: {
                count: string;
            };
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    /** Lookup99: staging_xcm::v3::Xcm<Call> */
    StagingXcmV3Xcm: string;
    /** Lookup101: staging_xcm::v3::Instruction<Call> */
    StagingXcmV3Instruction: {
        _enum: {
            WithdrawAsset: string;
            ReserveAssetDeposited: string;
            ReceiveTeleportedAsset: string;
            QueryResponse: {
                queryId: string;
                response: string;
                maxWeight: string;
                querier: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                xcm: string;
            };
            Transact: {
                originKind: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            ClearOrigin: string;
            DescendOrigin: string;
            ReportError: string;
            DepositAsset: {
                assets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                dest: string;
                xcm: string;
            };
            ExchangeAsset: {
                give: string;
                want: string;
                maximal: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                xcm: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                xcm: string;
            };
            ReportHolding: {
                responseInfo: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weightLimit: string;
            };
            RefundSurplus: string;
            SetErrorHandler: string;
            SetAppendix: string;
            ClearError: string;
            ClaimAsset: {
                assets: string;
                ticket: string;
            };
            Trap: string;
            SubscribeVersion: {
                queryId: string;
                maxResponseWeight: string;
            };
            UnsubscribeVersion: string;
            BurnAsset: string;
            ExpectAsset: string;
            ExpectOrigin: string;
            ExpectError: string;
            ExpectTransactStatus: string;
            QueryPallet: {
                moduleName: string;
                responseInfo: string;
            };
            ExpectPallet: {
                index: string;
                name: string;
                moduleName: string;
                crateMajor: string;
                minCrateMinor: string;
            };
            ReportTransactStatus: string;
            ClearTransactStatus: string;
            UniversalOrigin: string;
            ExportMessage: {
                network: string;
                destination: string;
                xcm: string;
            };
            LockAsset: {
                asset: string;
                unlocker: string;
            };
            UnlockAsset: {
                asset: string;
                target: string;
            };
            NoteUnlockable: {
                asset: string;
                owner: string;
            };
            RequestUnlock: {
                asset: string;
                locker: string;
            };
            SetFeesMode: {
                jitWithdraw: string;
            };
            SetTopic: string;
            ClearTopic: string;
            AliasOrigin: string;
            UnpaidExecution: {
                weightLimit: string;
                checkOrigin: string;
            };
        };
    };
    /** Lookup102: staging_xcm::v3::multiasset::MultiAssets */
    StagingXcmV3MultiassetMultiAssets: string;
    /** Lookup104: staging_xcm::v3::multiasset::MultiAsset */
    StagingXcmV3MultiAsset: {
        id: string;
        fun: string;
    };
    /** Lookup105: staging_xcm::v3::multiasset::AssetId */
    StagingXcmV3MultiassetAssetId: {
        _enum: {
            Concrete: string;
            Abstract: string;
        };
    };
    /** Lookup106: staging_xcm::v3::multiasset::Fungibility */
    StagingXcmV3MultiassetFungibility: {
        _enum: {
            Fungible: string;
            NonFungible: string;
        };
    };
    /** Lookup107: staging_xcm::v3::multiasset::AssetInstance */
    StagingXcmV3MultiassetAssetInstance: {
        _enum: {
            Undefined: string;
            Index: string;
            Array4: string;
            Array8: string;
            Array16: string;
            Array32: string;
        };
    };
    /** Lookup110: staging_xcm::v3::Response */
    StagingXcmV3Response: {
        _enum: {
            Null: string;
            Assets: string;
            ExecutionResult: string;
            Version: string;
            PalletsInfo: string;
            DispatchResult: string;
        };
    };
    /** Lookup114: staging_xcm::v3::PalletInfo */
    StagingXcmV3PalletInfo: {
        index: string;
        name: string;
        moduleName: string;
        major: string;
        minor: string;
        patch: string;
    };
    /** Lookup117: staging_xcm::v3::MaybeErrorCode */
    StagingXcmV3MaybeErrorCode: {
        _enum: {
            Success: string;
            Error: string;
            TruncatedError: string;
        };
    };
    /** Lookup120: staging_xcm::v2::OriginKind */
    StagingXcmV2OriginKind: {
        _enum: string[];
    };
    /** Lookup121: staging_xcm::double_encoded::DoubleEncoded<T> */
    StagingXcmDoubleEncoded: {
        encoded: string;
    };
    /** Lookup122: staging_xcm::v3::QueryResponseInfo */
    StagingXcmV3QueryResponseInfo: {
        destination: string;
        queryId: string;
        maxWeight: string;
    };
    /** Lookup123: staging_xcm::v3::multiasset::MultiAssetFilter */
    StagingXcmV3MultiassetMultiAssetFilter: {
        _enum: {
            Definite: string;
            Wild: string;
        };
    };
    /** Lookup124: staging_xcm::v3::multiasset::WildMultiAsset */
    StagingXcmV3MultiassetWildMultiAsset: {
        _enum: {
            All: string;
            AllOf: {
                id: string;
                fun: string;
            };
            AllCounted: string;
            AllOfCounted: {
                id: string;
                fun: string;
                count: string;
            };
        };
    };
    /** Lookup125: staging_xcm::v3::multiasset::WildFungibility */
    StagingXcmV3MultiassetWildFungibility: {
        _enum: string[];
    };
    /** Lookup126: staging_xcm::v3::WeightLimit */
    StagingXcmV3WeightLimit: {
        _enum: {
            Unlimited: string;
            Limited: string;
        };
    };
    /** Lookup127: staging_xcm::VersionedMultiAssets */
    StagingXcmVersionedMultiAssets: {
        _enum: {
            __Unused0: string;
            V2: string;
            __Unused2: string;
            V3: string;
        };
    };
    /** Lookup128: staging_xcm::v2::multiasset::MultiAssets */
    StagingXcmV2MultiassetMultiAssets: string;
    /** Lookup130: staging_xcm::v2::multiasset::MultiAsset */
    StagingXcmV2MultiAsset: {
        id: string;
        fun: string;
    };
    /** Lookup131: staging_xcm::v2::multiasset::AssetId */
    StagingXcmV2MultiassetAssetId: {
        _enum: {
            Concrete: string;
            Abstract: string;
        };
    };
    /** Lookup132: staging_xcm::v2::multilocation::MultiLocation */
    StagingXcmV2MultiLocation: {
        parents: string;
        interior: string;
    };
    /** Lookup133: staging_xcm::v2::multilocation::Junctions */
    StagingXcmV2MultilocationJunctions: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /** Lookup134: staging_xcm::v2::junction::Junction */
    StagingXcmV2Junction: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    /** Lookup135: staging_xcm::v2::NetworkId */
    StagingXcmV2NetworkId: {
        _enum: {
            Any: string;
            Named: string;
            Polkadot: string;
            Kusama: string;
        };
    };
    /** Lookup137: staging_xcm::v2::BodyId */
    StagingXcmV2BodyId: {
        _enum: {
            Unit: string;
            Named: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
            Defense: string;
            Administration: string;
            Treasury: string;
        };
    };
    /** Lookup138: staging_xcm::v2::BodyPart */
    StagingXcmV2BodyPart: {
        _enum: {
            Voice: string;
            Members: {
                count: string;
            };
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    /** Lookup139: staging_xcm::v2::multiasset::Fungibility */
    StagingXcmV2MultiassetFungibility: {
        _enum: {
            Fungible: string;
            NonFungible: string;
        };
    };
    /** Lookup140: staging_xcm::v2::multiasset::AssetInstance */
    StagingXcmV2MultiassetAssetInstance: {
        _enum: {
            Undefined: string;
            Index: string;
            Array4: string;
            Array8: string;
            Array16: string;
            Array32: string;
            Blob: string;
        };
    };
    /** Lookup141: staging_xcm::VersionedMultiLocation */
    StagingXcmVersionedMultiLocation: {
        _enum: {
            __Unused0: string;
            V2: string;
            __Unused2: string;
            V3: string;
        };
    };
    /** Lookup142: pallet_assets::pallet::Event<T, I> */
    PalletAssetsEvent: {
        _enum: {
            Created: {
                assetId: string;
                creator: string;
                owner: string;
            };
            Issued: {
                assetId: string;
                owner: string;
                amount: string;
            };
            Transferred: {
                assetId: string;
                from: string;
                to: string;
                amount: string;
            };
            Burned: {
                assetId: string;
                owner: string;
                balance: string;
            };
            TeamChanged: {
                assetId: string;
                issuer: string;
                admin: string;
                freezer: string;
            };
            OwnerChanged: {
                assetId: string;
                owner: string;
            };
            Frozen: {
                assetId: string;
                who: string;
            };
            Thawed: {
                assetId: string;
                who: string;
            };
            AssetFrozen: {
                assetId: string;
            };
            AssetThawed: {
                assetId: string;
            };
            AccountsDestroyed: {
                assetId: string;
                accountsDestroyed: string;
                accountsRemaining: string;
            };
            ApprovalsDestroyed: {
                assetId: string;
                approvalsDestroyed: string;
                approvalsRemaining: string;
            };
            DestructionStarted: {
                assetId: string;
            };
            Destroyed: {
                assetId: string;
            };
            ForceCreated: {
                assetId: string;
                owner: string;
            };
            MetadataSet: {
                assetId: string;
                name: string;
                symbol: string;
                decimals: string;
                isFrozen: string;
            };
            MetadataCleared: {
                assetId: string;
            };
            ApprovedTransfer: {
                assetId: string;
                source: string;
                delegate: string;
                amount: string;
            };
            ApprovalCancelled: {
                assetId: string;
                owner: string;
                delegate: string;
            };
            TransferredApproved: {
                assetId: string;
                owner: string;
                delegate: string;
                destination: string;
                amount: string;
            };
            AssetStatusChanged: {
                assetId: string;
            };
            AssetMinBalanceChanged: {
                assetId: string;
                newMinBalance: string;
            };
            Touched: {
                assetId: string;
                who: string;
                depositor: string;
            };
            Blocked: {
                assetId: string;
                who: string;
            };
        };
    };
    /** Lookup143: orml_xtokens::module::Event<T> */
    OrmlXtokensModuleEvent: {
        _enum: {
            TransferredMultiAssets: {
                sender: string;
                assets: string;
                fee: string;
                dest: string;
            };
        };
    };
    /** Lookup144: pallet_asset_manager::pallet::Event<T> */
    PalletAssetManagerEvent: {
        _enum: {
            ForeignAssetRegistered: {
                assetId: string;
                asset: string;
                metadata: string;
            };
            UnitsPerSecondChanged: {
                assetType: string;
                unitsPerSecond: string;
            };
            ForeignAssetTypeChanged: {
                assetId: string;
                newAssetType: string;
            };
            ForeignAssetRemoved: {
                assetId: string;
                assetType: string;
            };
            SupportedAssetRemoved: {
                assetType: string;
            };
            LocalAssetRegistered: {
                assetId: string;
                creator: string;
                owner: string;
            };
            ForeignAssetDestroyed: {
                assetId: string;
                assetType: string;
            };
            LocalAssetDestroyed: {
                assetId: string;
            };
        };
    };
    /** Lookup145: moonbase_runtime::xcm_config::AssetType */
    MoonbaseRuntimeXcmConfigAssetType: {
        _enum: {
            Xcm: string;
        };
    };
    /** Lookup146: moonbase_runtime::asset_config::AssetRegistrarMetadata */
    MoonbaseRuntimeAssetConfigAssetRegistrarMetadata: {
        name: string;
        symbol: string;
        decimals: string;
        isFrozen: string;
    };
    /** Lookup147: pallet_migrations::pallet::Event<T> */
    PalletMigrationsEvent: {
        _enum: {
            RuntimeUpgradeStarted: string;
            RuntimeUpgradeCompleted: {
                weight: string;
            };
            MigrationStarted: {
                migrationName: string;
            };
            MigrationCompleted: {
                migrationName: string;
                consumedWeight: string;
            };
            FailedToSuspendIdleXcmExecution: {
                error: string;
            };
            FailedToResumeIdleXcmExecution: {
                error: string;
            };
        };
    };
    /** Lookup148: pallet_xcm_transactor::pallet::Event<T> */
    PalletXcmTransactorEvent: {
        _enum: {
            TransactedDerivative: {
                accountId: string;
                dest: string;
                call: string;
                index: string;
            };
            TransactedSovereign: {
                feePayer: string;
                dest: string;
                call: string;
            };
            TransactedSigned: {
                feePayer: string;
                dest: string;
                call: string;
            };
            RegisteredDerivative: {
                accountId: string;
                index: string;
            };
            DeRegisteredDerivative: {
                index: string;
            };
            TransactFailed: {
                error: string;
            };
            TransactInfoChanged: {
                location: string;
                remoteInfo: string;
            };
            TransactInfoRemoved: {
                location: string;
            };
            DestFeePerSecondChanged: {
                location: string;
                feePerSecond: string;
            };
            DestFeePerSecondRemoved: {
                location: string;
            };
            HrmpManagementSent: {
                action: string;
            };
        };
    };
    /** Lookup149: pallet_xcm_transactor::pallet::RemoteTransactInfoWithMaxWeight */
    PalletXcmTransactorRemoteTransactInfoWithMaxWeight: {
        transactExtraWeight: string;
        maxWeight: string;
        transactExtraWeightSigned: string;
    };
    /** Lookup151: pallet_xcm_transactor::pallet::HrmpOperation */
    PalletXcmTransactorHrmpOperation: {
        _enum: {
            InitOpen: string;
            Accept: {
                paraId: string;
            };
            Close: string;
            Cancel: {
                channelId: string;
                openRequests: string;
            };
        };
    };
    /** Lookup152: pallet_xcm_transactor::pallet::HrmpInitParams */
    PalletXcmTransactorHrmpInitParams: {
        paraId: string;
        proposedMaxCapacity: string;
        proposedMaxMessageSize: string;
    };
    /** Lookup153: polkadot_parachain_primitives::primitives::HrmpChannelId */
    PolkadotParachainPrimitivesPrimitivesHrmpChannelId: {
        sender: string;
        recipient: string;
    };
    /** Lookup155: pallet_moonbeam_orbiters::pallet::Event<T> */
    PalletMoonbeamOrbitersEvent: {
        _enum: {
            OrbiterJoinCollatorPool: {
                collator: string;
                orbiter: string;
            };
            OrbiterLeaveCollatorPool: {
                collator: string;
                orbiter: string;
            };
            OrbiterRewarded: {
                account: string;
                rewards: string;
            };
            OrbiterRotation: {
                collator: string;
                oldOrbiter: string;
                newOrbiter: string;
            };
            OrbiterRegistered: {
                account: string;
                deposit: string;
            };
            OrbiterUnregistered: {
                account: string;
            };
        };
    };
    /** Lookup156: pallet_randomness::pallet::Event<T> */
    PalletRandomnessEvent: {
        _enum: {
            RandomnessRequestedBabeEpoch: {
                id: string;
                refundAddress: string;
                contractAddress: string;
                fee: string;
                gasLimit: string;
                numWords: string;
                salt: string;
                earliestEpoch: string;
            };
            RandomnessRequestedLocal: {
                id: string;
                refundAddress: string;
                contractAddress: string;
                fee: string;
                gasLimit: string;
                numWords: string;
                salt: string;
                earliestBlock: string;
            };
            RequestFulfilled: {
                id: string;
            };
            RequestFeeIncreased: {
                id: string;
                newFee: string;
            };
            RequestExpirationExecuted: {
                id: string;
            };
        };
    };
    /** Lookup158: pallet_conviction_voting::pallet::Event<T, I> */
    PalletConvictionVotingEvent: {
        _enum: {
            Delegated: string;
            Undelegated: string;
        };
    };
    /** Lookup159: pallet_referenda::pallet::Event<T, I> */
    PalletReferendaEvent: {
        _enum: {
            Submitted: {
                index: string;
                track: string;
                proposal: string;
            };
            DecisionDepositPlaced: {
                index: string;
                who: string;
                amount: string;
            };
            DecisionDepositRefunded: {
                index: string;
                who: string;
                amount: string;
            };
            DepositSlashed: {
                who: string;
                amount: string;
            };
            DecisionStarted: {
                index: string;
                track: string;
                proposal: string;
                tally: string;
            };
            ConfirmStarted: {
                index: string;
            };
            ConfirmAborted: {
                index: string;
            };
            Confirmed: {
                index: string;
                tally: string;
            };
            Approved: {
                index: string;
            };
            Rejected: {
                index: string;
                tally: string;
            };
            TimedOut: {
                index: string;
                tally: string;
            };
            Cancelled: {
                index: string;
                tally: string;
            };
            Killed: {
                index: string;
                tally: string;
            };
            SubmissionDepositRefunded: {
                index: string;
                who: string;
                amount: string;
            };
            MetadataSet: {
                _alias: {
                    hash_: string;
                };
                index: string;
                hash_: string;
            };
            MetadataCleared: {
                _alias: {
                    hash_: string;
                };
                index: string;
                hash_: string;
            };
        };
    };
    /** Lookup160: frame_support::traits::preimages::Bounded<moonbase_runtime::RuntimeCall> */
    FrameSupportPreimagesBounded: {
        _enum: {
            Legacy: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Inline: string;
            Lookup: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                len: string;
            };
        };
    };
    /** Lookup162: frame_system::pallet::Call<T> */
    FrameSystemCall: {
        _enum: {
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /** Lookup166: pallet_utility::pallet::Call<T> */
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            force_batch: {
                calls: string;
            };
            with_weight: {
                call: string;
                weight: string;
            };
        };
    };
    /** Lookup168: moonbase_runtime::OriginCaller */
    MoonbaseRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            __Unused4: string;
            __Unused5: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            __Unused9: string;
            Void: string;
            Ethereum: string;
            __Unused12: string;
            __Unused13: string;
            __Unused14: string;
            CouncilCollective: string;
            TechCommitteeCollective: string;
            __Unused17: string;
            __Unused18: string;
            __Unused19: string;
            __Unused20: string;
            __Unused21: string;
            __Unused22: string;
            __Unused23: string;
            __Unused24: string;
            __Unused25: string;
            CumulusXcm: string;
            __Unused27: string;
            PolkadotXcm: string;
            __Unused29: string;
            __Unused30: string;
            __Unused31: string;
            __Unused32: string;
            __Unused33: string;
            __Unused34: string;
            __Unused35: string;
            __Unused36: string;
            __Unused37: string;
            EthereumXcm: string;
            __Unused39: string;
            TreasuryCouncilCollective: string;
            __Unused41: string;
            __Unused42: string;
            Origins: string;
            __Unused44: string;
            __Unused45: string;
            OpenTechCommitteeCollective: string;
        };
    };
    /** Lookup169: frame_support::dispatch::RawOrigin[account::AccountId20](account::AccountId20) */
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /** Lookup170: pallet_ethereum::RawOrigin */
    PalletEthereumRawOrigin: {
        _enum: {
            EthereumTransaction: string;
        };
    };
    /** Lookup171: pallet_collective::RawOrigin<account::AccountId20, I> */
    PalletCollectiveRawOrigin: {
        _enum: {
            Members: string;
            Member: string;
            _Phantom: string;
        };
    };
    /** Lookup173: cumulus_pallet_xcm::pallet::Origin */
    CumulusPalletXcmOrigin: {
        _enum: {
            Relay: string;
            SiblingParachain: string;
        };
    };
    /** Lookup174: pallet_xcm::pallet::Origin */
    PalletXcmOrigin: {
        _enum: {
            Xcm: string;
            Response: string;
        };
    };
    /** Lookup175: pallet_ethereum_xcm::RawOrigin */
    PalletEthereumXcmRawOrigin: {
        _enum: {
            XcmEthereumTransaction: string;
        };
    };
    /** Lookup177: moonbase_runtime::governance::origins::custom_origins::Origin */
    MoonbaseRuntimeGovernanceOriginsCustomOriginsOrigin: {
        _enum: string[];
    };
    /** Lookup179: sp_core::Void */
    SpCoreVoid: string;
    /** Lookup180: pallet_timestamp::pallet::Call<T> */
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /** Lookup181: pallet_balances::pallet::Call<T, I> */
    PalletBalancesCall: {
        _enum: {
            transfer_allow_death: {
                dest: string;
                value: string;
            };
            set_balance_deprecated: {
                who: string;
                newFree: string;
                oldReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            transfer_keep_alive: {
                dest: string;
                value: string;
            };
            transfer_all: {
                dest: string;
                keepAlive: string;
            };
            force_unreserve: {
                who: string;
                amount: string;
            };
            upgrade_accounts: {
                who: string;
            };
            transfer: {
                dest: string;
                value: string;
            };
            force_set_balance: {
                who: string;
                newFree: string;
            };
        };
    };
    /** Lookup183: pallet_sudo::pallet::Call<T> */
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /** Lookup184: cumulus_pallet_parachain_system::pallet::Call<T> */
    CumulusPalletParachainSystemCall: {
        _enum: {
            set_validation_data: {
                data: string;
            };
            sudo_send_upward_message: {
                message: string;
            };
            authorize_upgrade: {
                codeHash: string;
                checkVersion: string;
            };
            enact_authorized_upgrade: {
                code: string;
            };
        };
    };
    /** Lookup185: cumulus_primitives_parachain_inherent::ParachainInherentData */
    CumulusPrimitivesParachainInherentParachainInherentData: {
        validationData: string;
        relayChainState: string;
        downwardMessages: string;
        horizontalMessages: string;
    };
    /** Lookup186: polkadot_primitives::v5::PersistedValidationData<primitive_types::H256, N> */
    PolkadotPrimitivesV5PersistedValidationData: {
        parentHead: string;
        relayParentNumber: string;
        relayParentStorageRoot: string;
        maxPovSize: string;
    };
    /** Lookup188: sp_trie::storage_proof::StorageProof */
    SpTrieStorageProof: {
        trieNodes: string;
    };
    /** Lookup191: polkadot_core_primitives::InboundDownwardMessage<BlockNumber> */
    PolkadotCorePrimitivesInboundDownwardMessage: {
        sentAt: string;
        msg: string;
    };
    /** Lookup194: polkadot_core_primitives::InboundHrmpMessage<BlockNumber> */
    PolkadotCorePrimitivesInboundHrmpMessage: {
        sentAt: string;
        data: string;
    };
    /** Lookup197: pallet_evm::pallet::Call<T> */
    PalletEvmCall: {
        _enum: {
            withdraw: {
                address: string;
                value: string;
            };
            call: {
                source: string;
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                maxFeePerGas: string;
                maxPriorityFeePerGas: string;
                nonce: string;
                accessList: string;
            };
            create: {
                source: string;
                init: string;
                value: string;
                gasLimit: string;
                maxFeePerGas: string;
                maxPriorityFeePerGas: string;
                nonce: string;
                accessList: string;
            };
            create2: {
                source: string;
                init: string;
                salt: string;
                value: string;
                gasLimit: string;
                maxFeePerGas: string;
                maxPriorityFeePerGas: string;
                nonce: string;
                accessList: string;
            };
        };
    };
    /** Lookup203: pallet_ethereum::pallet::Call<T> */
    PalletEthereumCall: {
        _enum: {
            transact: {
                transaction: string;
            };
        };
    };
    /** Lookup204: ethereum::transaction::TransactionV2 */
    EthereumTransactionTransactionV2: {
        _enum: {
            Legacy: string;
            EIP2930: string;
            EIP1559: string;
        };
    };
    /** Lookup205: ethereum::transaction::LegacyTransaction */
    EthereumTransactionLegacyTransaction: {
        nonce: string;
        gasPrice: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        signature: string;
    };
    /** Lookup206: ethereum::transaction::TransactionAction */
    EthereumTransactionTransactionAction: {
        _enum: {
            Call: string;
            Create: string;
        };
    };
    /** Lookup207: ethereum::transaction::TransactionSignature */
    EthereumTransactionTransactionSignature: {
        v: string;
        r: string;
        s: string;
    };
    /** Lookup209: ethereum::transaction::EIP2930Transaction */
    EthereumTransactionEip2930Transaction: {
        chainId: string;
        nonce: string;
        gasPrice: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
        oddYParity: string;
        r: string;
        s: string;
    };
    /** Lookup211: ethereum::transaction::AccessListItem */
    EthereumTransactionAccessListItem: {
        address: string;
        storageKeys: string;
    };
    /** Lookup212: ethereum::transaction::EIP1559Transaction */
    EthereumTransactionEip1559Transaction: {
        chainId: string;
        nonce: string;
        maxPriorityFeePerGas: string;
        maxFeePerGas: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
        oddYParity: string;
        r: string;
        s: string;
    };
    /** Lookup213: pallet_parachain_staking::pallet::Call<T> */
    PalletParachainStakingCall: {
        _enum: {
            set_staking_expectations: {
                expectations: {
                    min: string;
                    ideal: string;
                    max: string;
                };
            };
            set_inflation: {
                schedule: {
                    min: string;
                    ideal: string;
                    max: string;
                };
            };
            set_parachain_bond_account: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_parachain_bond_reserve_percent: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_total_selected: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_collator_commission: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_blocks_per_round: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            join_candidates: {
                bond: string;
                candidateCount: string;
            };
            schedule_leave_candidates: {
                candidateCount: string;
            };
            execute_leave_candidates: {
                candidate: string;
                candidateDelegationCount: string;
            };
            cancel_leave_candidates: {
                candidateCount: string;
            };
            go_offline: string;
            go_online: string;
            candidate_bond_more: {
                more: string;
            };
            schedule_candidate_bond_less: {
                less: string;
            };
            execute_candidate_bond_less: {
                candidate: string;
            };
            cancel_candidate_bond_less: string;
            delegate: {
                candidate: string;
                amount: string;
                candidateDelegationCount: string;
                delegationCount: string;
            };
            delegate_with_auto_compound: {
                candidate: string;
                amount: string;
                autoCompound: string;
                candidateDelegationCount: string;
                candidateAutoCompoundingDelegationCount: string;
                delegationCount: string;
            };
            removed_call_19: string;
            removed_call_20: string;
            removed_call_21: string;
            schedule_revoke_delegation: {
                collator: string;
            };
            delegator_bond_more: {
                candidate: string;
                more: string;
            };
            schedule_delegator_bond_less: {
                candidate: string;
                less: string;
            };
            execute_delegation_request: {
                delegator: string;
                candidate: string;
            };
            cancel_delegation_request: {
                candidate: string;
            };
            set_auto_compound: {
                candidate: string;
                value: string;
                candidateAutoCompoundingDelegationCountHint: string;
                delegationCountHint: string;
            };
            hotfix_remove_delegation_requests_exited_candidates: {
                candidates: string;
            };
            notify_inactive_collator: {
                collator: string;
            };
            enable_marking_offline: {
                value: string;
            };
            force_join_candidates: {
                account: string;
                bond: string;
                candidateCount: string;
            };
        };
    };
    /** Lookup216: pallet_scheduler::pallet::Call<T> */
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /** Lookup218: pallet_democracy::pallet::Call<T> */
    PalletDemocracyCall: {
        _enum: {
            propose: {
                proposal: string;
                value: string;
            };
            second: {
                proposal: string;
            };
            vote: {
                refIndex: string;
                vote: string;
            };
            emergency_cancel: {
                refIndex: string;
            };
            external_propose: {
                proposal: string;
            };
            external_propose_majority: {
                proposal: string;
            };
            external_propose_default: {
                proposal: string;
            };
            fast_track: {
                proposalHash: string;
                votingPeriod: string;
                delay: string;
            };
            veto_external: {
                proposalHash: string;
            };
            cancel_referendum: {
                refIndex: string;
            };
            delegate: {
                to: string;
                conviction: string;
                balance: string;
            };
            undelegate: string;
            clear_public_proposals: string;
            unlock: {
                target: string;
            };
            remove_vote: {
                index: string;
            };
            remove_other_vote: {
                target: string;
                index: string;
            };
            blacklist: {
                proposalHash: string;
                maybeRefIndex: string;
            };
            cancel_proposal: {
                propIndex: string;
            };
            set_metadata: {
                owner: string;
                maybeHash: string;
            };
        };
    };
    /** Lookup219: pallet_democracy::conviction::Conviction */
    PalletDemocracyConviction: {
        _enum: string[];
    };
    /** Lookup222: pallet_collective::pallet::Call<T, I> */
    PalletCollectiveCall: {
        _enum: {
            set_members: {
                newMembers: string;
                prime: string;
                oldCount: string;
            };
            execute: {
                proposal: string;
                lengthBound: string;
            };
            propose: {
                threshold: string;
                proposal: string;
                lengthBound: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
            __Unused4: string;
            disapprove_proposal: {
                proposalHash: string;
            };
            close: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
        };
    };
    /** Lookup224: pallet_treasury::pallet::Call<T, I> */
    PalletTreasuryCall: {
        _enum: {
            propose_spend: {
                value: string;
                beneficiary: string;
            };
            reject_proposal: {
                proposalId: string;
            };
            approve_proposal: {
                proposalId: string;
            };
            spend: {
                amount: string;
                beneficiary: string;
            };
            remove_approval: {
                proposalId: string;
            };
        };
    };
    /** Lookup225: pallet_author_inherent::pallet::Call<T> */
    PalletAuthorInherentCall: {
        _enum: string[];
    };
    /** Lookup226: pallet_author_slot_filter::pallet::Call<T> */
    PalletAuthorSlotFilterCall: {
        _enum: {
            set_eligible: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
        };
    };
    /** Lookup227: pallet_crowdloan_rewards::pallet::Call<T> */
    PalletCrowdloanRewardsCall: {
        _enum: {
            associate_native_identity: {
                rewardAccount: string;
                relayAccount: string;
                proof: string;
            };
            change_association_with_relay_keys: {
                rewardAccount: string;
                previousAccount: string;
                proofs: string;
            };
            claim: string;
            update_reward_address: {
                newRewardAccount: string;
            };
            complete_initialization: {
                leaseEndingBlock: string;
            };
            initialize_reward_vec: {
                rewards: string;
            };
        };
    };
    /** Lookup228: sp_runtime::MultiSignature */
    SpRuntimeMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    /** Lookup229: sp_core::ed25519::Signature */
    SpCoreEd25519Signature: string;
    /** Lookup231: sp_core::sr25519::Signature */
    SpCoreSr25519Signature: string;
    /** Lookup232: sp_core::ecdsa::Signature */
    SpCoreEcdsaSignature: string;
    /** Lookup238: pallet_author_mapping::pallet::Call<T> */
    PalletAuthorMappingCall: {
        _enum: {
            add_association: {
                nimbusId: string;
            };
            update_association: {
                oldNimbusId: string;
                newNimbusId: string;
            };
            clear_association: {
                nimbusId: string;
            };
            remove_keys: string;
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
        };
    };
    /** Lookup239: pallet_proxy::pallet::Call<T> */
    PalletProxyCall: {
        _enum: {
            proxy: {
                real: string;
                forceProxyType: string;
                call: string;
            };
            add_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxies: string;
            create_pure: {
                proxyType: string;
                delay: string;
                index: string;
            };
            kill_pure: {
                spawner: string;
                proxyType: string;
                index: string;
                height: string;
                extIndex: string;
            };
            announce: {
                real: string;
                callHash: string;
            };
            remove_announcement: {
                real: string;
                callHash: string;
            };
            reject_announcement: {
                delegate: string;
                callHash: string;
            };
            proxy_announced: {
                delegate: string;
                real: string;
                forceProxyType: string;
                call: string;
            };
        };
    };
    /** Lookup241: pallet_maintenance_mode::pallet::Call<T> */
    PalletMaintenanceModeCall: {
        _enum: string[];
    };
    /** Lookup242: pallet_identity::pallet::Call<T> */
    PalletIdentityCall: {
        _enum: {
            add_registrar: {
                account: string;
            };
            set_identity: {
                info: string;
            };
            set_subs: {
                subs: string;
            };
            clear_identity: string;
            request_judgement: {
                regIndex: string;
                maxFee: string;
            };
            cancel_request: {
                regIndex: string;
            };
            set_fee: {
                index: string;
                fee: string;
            };
            set_account_id: {
                _alias: {
                    new_: string;
                };
                index: string;
                new_: string;
            };
            set_fields: {
                index: string;
                fields: string;
            };
            provide_judgement: {
                regIndex: string;
                target: string;
                judgement: string;
                identity: string;
            };
            kill_identity: {
                target: string;
            };
            add_sub: {
                sub: string;
                data: string;
            };
            rename_sub: {
                sub: string;
                data: string;
            };
            remove_sub: {
                sub: string;
            };
            quit_sub: string;
        };
    };
    /** Lookup243: pallet_identity::types::IdentityInfo<FieldLimit> */
    PalletIdentityIdentityInfo: {
        additional: string;
        display: string;
        legal: string;
        web: string;
        riot: string;
        email: string;
        pgpFingerprint: string;
        image: string;
        twitter: string;
    };
    /** Lookup279: pallet_identity::types::BitFlags<pallet_identity::types::IdentityField> */
    PalletIdentityBitFlags: {
        _bitLength: number;
        Display: number;
        Legal: number;
        Web: number;
        Riot: number;
        Email: number;
        PgpFingerprint: number;
        Image: number;
        Twitter: number;
    };
    /** Lookup280: pallet_identity::types::IdentityField */
    PalletIdentityIdentityField: {
        _enum: string[];
    };
    /** Lookup281: pallet_identity::types::Judgement<Balance> */
    PalletIdentityJudgement: {
        _enum: {
            Unknown: string;
            FeePaid: string;
            Reasonable: string;
            KnownGood: string;
            OutOfDate: string;
            LowQuality: string;
            Erroneous: string;
        };
    };
    /** Lookup282: cumulus_pallet_xcmp_queue::pallet::Call<T> */
    CumulusPalletXcmpQueueCall: {
        _enum: {
            service_overweight: {
                index: string;
                weightLimit: string;
            };
            suspend_xcm_execution: string;
            resume_xcm_execution: string;
            update_suspend_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_drop_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_resume_threshold: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_threshold_weight: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_weight_restrict_decay: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            update_xcmp_max_individual_weight: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
        };
    };
    /** Lookup283: cumulus_pallet_dmp_queue::pallet::Call<T> */
    CumulusPalletDmpQueueCall: {
        _enum: {
            service_overweight: {
                index: string;
                weightLimit: string;
            };
        };
    };
    /** Lookup284: pallet_xcm::pallet::Call<T> */
    PalletXcmCall: {
        _enum: {
            send: {
                dest: string;
                message: string;
            };
            teleport_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
            };
            reserve_transfer_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
            };
            execute: {
                message: string;
                maxWeight: string;
            };
            force_xcm_version: {
                location: string;
                version: string;
            };
            force_default_xcm_version: {
                maybeXcmVersion: string;
            };
            force_subscribe_version_notify: {
                location: string;
            };
            force_unsubscribe_version_notify: {
                location: string;
            };
            limited_reserve_transfer_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
                weightLimit: string;
            };
            limited_teleport_assets: {
                dest: string;
                beneficiary: string;
                assets: string;
                feeAssetItem: string;
                weightLimit: string;
            };
            force_suspension: {
                suspended: string;
            };
        };
    };
    /** Lookup285: staging_xcm::VersionedXcm<RuntimeCall> */
    StagingXcmVersionedXcm: {
        _enum: {
            __Unused0: string;
            __Unused1: string;
            V2: string;
            V3: string;
        };
    };
    /** Lookup286: staging_xcm::v2::Xcm<RuntimeCall> */
    StagingXcmV2Xcm: string;
    /** Lookup288: staging_xcm::v2::Instruction<RuntimeCall> */
    StagingXcmV2Instruction: {
        _enum: {
            WithdrawAsset: string;
            ReserveAssetDeposited: string;
            ReceiveTeleportedAsset: string;
            QueryResponse: {
                queryId: string;
                response: string;
                maxWeight: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                xcm: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            ClearOrigin: string;
            DescendOrigin: string;
            ReportError: {
                queryId: string;
                dest: string;
                maxResponseWeight: string;
            };
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                xcm: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                xcm: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                xcm: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
                maxResponseWeight: string;
            };
            BuyExecution: {
                fees: string;
                weightLimit: string;
            };
            RefundSurplus: string;
            SetErrorHandler: string;
            SetAppendix: string;
            ClearError: string;
            ClaimAsset: {
                assets: string;
                ticket: string;
            };
            Trap: string;
            SubscribeVersion: {
                queryId: string;
                maxResponseWeight: string;
            };
            UnsubscribeVersion: string;
        };
    };
    /** Lookup289: staging_xcm::v2::Response */
    StagingXcmV2Response: {
        _enum: {
            Null: string;
            Assets: string;
            ExecutionResult: string;
            Version: string;
        };
    };
    /** Lookup292: staging_xcm::v2::traits::Error */
    StagingXcmV2TraitsError: {
        _enum: {
            Overflow: string;
            Unimplemented: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            MultiLocationFull: string;
            MultiLocationNotInvertible: string;
            BadOrigin: string;
            InvalidLocation: string;
            AssetNotFound: string;
            FailedToTransactAsset: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            ExceedsMaxMessageSize: string;
            DestinationUnsupported: string;
            Transport: string;
            Unroutable: string;
            UnknownClaim: string;
            FailedToDecode: string;
            MaxWeightInvalid: string;
            NotHoldingFees: string;
            TooExpensive: string;
            Trap: string;
            UnhandledXcmVersion: string;
            WeightLimitReached: string;
            Barrier: string;
            WeightNotComputable: string;
        };
    };
    /** Lookup293: staging_xcm::v2::multiasset::MultiAssetFilter */
    StagingXcmV2MultiassetMultiAssetFilter: {
        _enum: {
            Definite: string;
            Wild: string;
        };
    };
    /** Lookup294: staging_xcm::v2::multiasset::WildMultiAsset */
    StagingXcmV2MultiassetWildMultiAsset: {
        _enum: {
            All: string;
            AllOf: {
                id: string;
                fun: string;
            };
        };
    };
    /** Lookup295: staging_xcm::v2::multiasset::WildFungibility */
    StagingXcmV2MultiassetWildFungibility: {
        _enum: string[];
    };
    /** Lookup296: staging_xcm::v2::WeightLimit */
    StagingXcmV2WeightLimit: {
        _enum: {
            Unlimited: string;
            Limited: string;
        };
    };
    /** Lookup305: pallet_assets::pallet::Call<T, I> */
    PalletAssetsCall: {
        _enum: {
            create: {
                id: string;
                admin: string;
                minBalance: string;
            };
            force_create: {
                id: string;
                owner: string;
                isSufficient: string;
                minBalance: string;
            };
            start_destroy: {
                id: string;
            };
            destroy_accounts: {
                id: string;
            };
            destroy_approvals: {
                id: string;
            };
            finish_destroy: {
                id: string;
            };
            mint: {
                id: string;
                beneficiary: string;
                amount: string;
            };
            burn: {
                id: string;
                who: string;
                amount: string;
            };
            transfer: {
                id: string;
                target: string;
                amount: string;
            };
            transfer_keep_alive: {
                id: string;
                target: string;
                amount: string;
            };
            force_transfer: {
                id: string;
                source: string;
                dest: string;
                amount: string;
            };
            freeze: {
                id: string;
                who: string;
            };
            thaw: {
                id: string;
                who: string;
            };
            freeze_asset: {
                id: string;
            };
            thaw_asset: {
                id: string;
            };
            transfer_ownership: {
                id: string;
                owner: string;
            };
            set_team: {
                id: string;
                issuer: string;
                admin: string;
                freezer: string;
            };
            set_metadata: {
                id: string;
                name: string;
                symbol: string;
                decimals: string;
            };
            clear_metadata: {
                id: string;
            };
            force_set_metadata: {
                id: string;
                name: string;
                symbol: string;
                decimals: string;
                isFrozen: string;
            };
            force_clear_metadata: {
                id: string;
            };
            force_asset_status: {
                id: string;
                owner: string;
                issuer: string;
                admin: string;
                freezer: string;
                minBalance: string;
                isSufficient: string;
                isFrozen: string;
            };
            approve_transfer: {
                id: string;
                delegate: string;
                amount: string;
            };
            cancel_approval: {
                id: string;
                delegate: string;
            };
            force_cancel_approval: {
                id: string;
                owner: string;
                delegate: string;
            };
            transfer_approved: {
                id: string;
                owner: string;
                destination: string;
                amount: string;
            };
            touch: {
                id: string;
            };
            refund: {
                id: string;
                allowBurn: string;
            };
            set_min_balance: {
                id: string;
                minBalance: string;
            };
            touch_other: {
                id: string;
                who: string;
            };
            refund_other: {
                id: string;
                who: string;
            };
            block: {
                id: string;
                who: string;
            };
        };
    };
    /** Lookup306: orml_xtokens::module::Call<T> */
    OrmlXtokensModuleCall: {
        _enum: {
            transfer: {
                currencyId: string;
                amount: string;
                dest: string;
                destWeightLimit: string;
            };
            transfer_multiasset: {
                asset: string;
                dest: string;
                destWeightLimit: string;
            };
            transfer_with_fee: {
                currencyId: string;
                amount: string;
                fee: string;
                dest: string;
                destWeightLimit: string;
            };
            transfer_multiasset_with_fee: {
                asset: string;
                fee: string;
                dest: string;
                destWeightLimit: string;
            };
            transfer_multicurrencies: {
                currencies: string;
                feeItem: string;
                dest: string;
                destWeightLimit: string;
            };
            transfer_multiassets: {
                assets: string;
                feeItem: string;
                dest: string;
                destWeightLimit: string;
            };
        };
    };
    /** Lookup307: moonbase_runtime::xcm_config::CurrencyId */
    MoonbaseRuntimeXcmConfigCurrencyId: {
        _enum: {
            SelfReserve: string;
            ForeignAsset: string;
            LocalAssetReserve: string;
            Erc20: {
                contractAddress: string;
            };
        };
    };
    /** Lookup308: staging_xcm::VersionedMultiAsset */
    StagingXcmVersionedMultiAsset: {
        _enum: {
            __Unused0: string;
            V2: string;
            __Unused2: string;
            V3: string;
        };
    };
    /** Lookup311: pallet_asset_manager::pallet::Call<T> */
    PalletAssetManagerCall: {
        _enum: {
            register_foreign_asset: {
                asset: string;
                metadata: string;
                minAmount: string;
                isSufficient: string;
            };
            set_asset_units_per_second: {
                assetType: string;
                unitsPerSecond: string;
                numAssetsWeightHint: string;
            };
            change_existing_asset_type: {
                assetId: string;
                newAssetType: string;
                numAssetsWeightHint: string;
            };
            remove_supported_asset: {
                assetType: string;
                numAssetsWeightHint: string;
            };
            remove_existing_asset_type: {
                assetId: string;
                numAssetsWeightHint: string;
            };
            register_local_asset: {
                creator: string;
                owner: string;
                isSufficient: string;
                minBalance: string;
            };
            destroy_foreign_asset: {
                assetId: string;
                numAssetsWeightHint: string;
            };
            destroy_local_asset: {
                assetId: string;
            };
        };
    };
    /** Lookup312: pallet_xcm_transactor::pallet::Call<T> */
    PalletXcmTransactorCall: {
        _enum: {
            register: {
                who: string;
                index: string;
            };
            deregister: {
                index: string;
            };
            transact_through_derivative: {
                dest: string;
                index: string;
                fee: string;
                innerCall: string;
                weightInfo: string;
                refund: string;
            };
            transact_through_sovereign: {
                dest: string;
                feePayer: string;
                fee: string;
                call: string;
                originKind: string;
                weightInfo: string;
                refund: string;
            };
            set_transact_info: {
                location: string;
                transactExtraWeight: string;
                maxWeight: string;
                transactExtraWeightSigned: string;
            };
            remove_transact_info: {
                location: string;
            };
            transact_through_signed: {
                dest: string;
                fee: string;
                call: string;
                weightInfo: string;
                refund: string;
            };
            set_fee_per_second: {
                assetLocation: string;
                feePerSecond: string;
            };
            remove_fee_per_second: {
                assetLocation: string;
            };
            hrmp_manage: {
                action: string;
                fee: string;
                weightInfo: string;
            };
        };
    };
    /** Lookup313: moonbase_runtime::xcm_config::Transactors */
    MoonbaseRuntimeXcmConfigTransactors: {
        _enum: string[];
    };
    /** Lookup314: pallet_xcm_transactor::pallet::CurrencyPayment<moonbase_runtime::xcm_config::CurrencyId> */
    PalletXcmTransactorCurrencyPayment: {
        currency: string;
        feeAmount: string;
    };
    /** Lookup315: pallet_xcm_transactor::pallet::Currency<moonbase_runtime::xcm_config::CurrencyId> */
    PalletXcmTransactorCurrency: {
        _enum: {
            AsCurrencyId: string;
            AsMultiLocation: string;
        };
    };
    /** Lookup317: pallet_xcm_transactor::pallet::TransactWeights */
    PalletXcmTransactorTransactWeights: {
        transactRequiredWeightAtMost: string;
        overallWeight: string;
    };
    /** Lookup319: pallet_moonbeam_orbiters::pallet::Call<T> */
    PalletMoonbeamOrbitersCall: {
        _enum: {
            collator_add_orbiter: {
                orbiter: string;
            };
            collator_remove_orbiter: {
                orbiter: string;
            };
            orbiter_leave_collator_pool: {
                collator: string;
            };
            orbiter_register: string;
            orbiter_unregister: {
                collatorsPoolCount: string;
            };
            add_collator: {
                collator: string;
            };
            remove_collator: {
                collator: string;
            };
        };
    };
    /** Lookup320: pallet_ethereum_xcm::pallet::Call<T> */
    PalletEthereumXcmCall: {
        _enum: {
            transact: {
                xcmTransaction: string;
            };
            transact_through_proxy: {
                transactAs: string;
                xcmTransaction: string;
            };
            suspend_ethereum_xcm_execution: string;
            resume_ethereum_xcm_execution: string;
        };
    };
    /** Lookup321: xcm_primitives::ethereum_xcm::EthereumXcmTransaction */
    XcmPrimitivesEthereumXcmEthereumXcmTransaction: {
        _enum: {
            V1: string;
            V2: string;
        };
    };
    /** Lookup322: xcm_primitives::ethereum_xcm::EthereumXcmTransactionV1 */
    XcmPrimitivesEthereumXcmEthereumXcmTransactionV1: {
        gasLimit: string;
        feePayment: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
    };
    /** Lookup323: xcm_primitives::ethereum_xcm::EthereumXcmFee */
    XcmPrimitivesEthereumXcmEthereumXcmFee: {
        _enum: {
            Manual: string;
            Auto: string;
        };
    };
    /** Lookup324: xcm_primitives::ethereum_xcm::ManualEthereumXcmFee */
    XcmPrimitivesEthereumXcmManualEthereumXcmFee: {
        gasPrice: string;
        maxFeePerGas: string;
    };
    /** Lookup327: xcm_primitives::ethereum_xcm::EthereumXcmTransactionV2 */
    XcmPrimitivesEthereumXcmEthereumXcmTransactionV2: {
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
    };
    /** Lookup328: pallet_randomness::pallet::Call<T> */
    PalletRandomnessCall: {
        _enum: string[];
    };
    /** Lookup330: pallet_conviction_voting::pallet::Call<T, I> */
    PalletConvictionVotingCall: {
        _enum: {
            vote: {
                pollIndex: string;
                vote: string;
            };
            delegate: {
                class: string;
                to: string;
                conviction: string;
                balance: string;
            };
            undelegate: {
                class: string;
            };
            unlock: {
                class: string;
                target: string;
            };
            remove_vote: {
                class: string;
                index: string;
            };
            remove_other_vote: {
                target: string;
                class: string;
                index: string;
            };
        };
    };
    /** Lookup331: pallet_conviction_voting::vote::AccountVote<Balance> */
    PalletConvictionVotingVoteAccountVote: {
        _enum: {
            Standard: {
                vote: string;
                balance: string;
            };
            Split: {
                aye: string;
                nay: string;
            };
            SplitAbstain: {
                aye: string;
                nay: string;
                abstain: string;
            };
        };
    };
    /** Lookup333: pallet_conviction_voting::conviction::Conviction */
    PalletConvictionVotingConviction: {
        _enum: string[];
    };
    /** Lookup335: pallet_referenda::pallet::Call<T, I> */
    PalletReferendaCall: {
        _enum: {
            submit: {
                proposalOrigin: string;
                proposal: string;
                enactmentMoment: string;
            };
            place_decision_deposit: {
                index: string;
            };
            refund_decision_deposit: {
                index: string;
            };
            cancel: {
                index: string;
            };
            kill: {
                index: string;
            };
            nudge_referendum: {
                index: string;
            };
            one_fewer_deciding: {
                track: string;
            };
            refund_submission_deposit: {
                index: string;
            };
            set_metadata: {
                index: string;
                maybeHash: string;
            };
        };
    };
    /** Lookup336: frame_support::traits::schedule::DispatchTime<BlockNumber> */
    FrameSupportScheduleDispatchTime: {
        _enum: {
            At: string;
            After: string;
        };
    };
    /** Lookup337: pallet_preimage::pallet::Call<T> */
    PalletPreimageCall: {
        _enum: {
            note_preimage: {
                bytes: string;
            };
            unnote_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            request_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            unrequest_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /** Lookup338: pallet_whitelist::pallet::Call<T> */
    PalletWhitelistCall: {
        _enum: {
            whitelist_call: {
                callHash: string;
            };
            remove_whitelisted_call: {
                callHash: string;
            };
            dispatch_whitelisted_call: {
                callHash: string;
                callEncodedLen: string;
                callWeightWitness: string;
            };
            dispatch_whitelisted_call_with_preimage: {
                call: string;
            };
        };
    };
    /** Lookup340: pallet_root_testing::pallet::Call<T> */
    PalletRootTestingCall: {
        _enum: {
            fill_block: {
                ratio: string;
            };
        };
    };
    /** Lookup341: pallet_multisig::pallet::Call<T> */
    PalletMultisigCall: {
        _enum: {
            as_multi_threshold_1: {
                otherSignatories: string;
                call: string;
            };
            as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                call: string;
                maxWeight: string;
            };
            approve_as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                threshold: string;
                otherSignatories: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /** Lookup343: pallet_multisig::Timepoint<BlockNumber> */
    PalletMultisigTimepoint: {
        height: string;
        index: string;
    };
    /** Lookup345: pallet_conviction_voting::types::Tally<Votes, Total> */
    PalletConvictionVotingTally: {
        ayes: string;
        nays: string;
        support: string;
    };
    /** Lookup346: pallet_preimage::pallet::Event<T> */
    PalletPreimageEvent: {
        _enum: {
            Noted: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Requested: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Cleared: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /** Lookup347: pallet_whitelist::pallet::Event<T> */
    PalletWhitelistEvent: {
        _enum: {
            CallWhitelisted: {
                callHash: string;
            };
            WhitelistedCallRemoved: {
                callHash: string;
            };
            WhitelistedCallDispatched: {
                callHash: string;
                result: string;
            };
        };
    };
    /** Lookup349: frame_support::dispatch::PostDispatchInfo */
    FrameSupportDispatchPostDispatchInfo: {
        actualWeight: string;
        paysFee: string;
    };
    /** Lookup350: sp_runtime::DispatchErrorWithPostInfo<frame_support::dispatch::PostDispatchInfo> */
    SpRuntimeDispatchErrorWithPostInfo: {
        postInfo: string;
        error: string;
    };
    /** Lookup352: pallet_multisig::pallet::Event<T> */
    PalletMultisigEvent: {
        _enum: {
            NewMultisig: {
                approving: string;
                multisig: string;
                callHash: string;
            };
            MultisigApproval: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
            MultisigExecuted: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
                result: string;
            };
            MultisigCancelled: {
                cancelling: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
        };
    };
    /** Lookup353: frame_system::Phase */
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /** Lookup355: frame_system::LastRuntimeUpgradeInfo */
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /** Lookup356: frame_system::limits::BlockWeights */
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /** Lookup357: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass> */
    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /** Lookup358: frame_system::limits::WeightsPerClass */
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /** Lookup359: frame_system::limits::BlockLength */
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /** Lookup360: frame_support::dispatch::PerDispatchClass<T> */
    FrameSupportDispatchPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /** Lookup361: sp_weights::RuntimeDbWeight */
    SpWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /** Lookup362: sp_version::RuntimeVersion */
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /** Lookup366: frame_system::pallet::Error<T> */
    FrameSystemError: {
        _enum: string[];
    };
    /** Lookup367: pallet_utility::pallet::Error<T> */
    PalletUtilityError: {
        _enum: string[];
    };
    /** Lookup369: pallet_balances::types::BalanceLock<Balance> */
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /** Lookup370: pallet_balances::types::Reasons */
    PalletBalancesReasons: {
        _enum: string[];
    };
    /** Lookup373: pallet_balances::types::ReserveData<ReserveIdentifier, Balance> */
    PalletBalancesReserveData: {
        id: string;
        amount: string;
    };
    /** Lookup377: moonbase_runtime::RuntimeHoldReason */
    MoonbaseRuntimeRuntimeHoldReason: string;
    /** Lookup380: pallet_balances::types::IdAmount<Id, Balance> */
    PalletBalancesIdAmount: {
        id: string;
        amount: string;
    };
    /** Lookup382: pallet_balances::pallet::Error<T, I> */
    PalletBalancesError: {
        _enum: string[];
    };
    /** Lookup383: pallet_sudo::pallet::Error<T> */
    PalletSudoError: {
        _enum: string[];
    };
    /** Lookup385: cumulus_pallet_parachain_system::unincluded_segment::Ancestor<primitive_types::H256> */
    CumulusPalletParachainSystemUnincludedSegmentAncestor: {
        usedBandwidth: string;
        paraHeadHash: string;
        consumedGoAheadSignal: string;
    };
    /** Lookup386: cumulus_pallet_parachain_system::unincluded_segment::UsedBandwidth */
    CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth: {
        umpMsgCount: string;
        umpTotalBytes: string;
        hrmpOutgoing: string;
    };
    /** Lookup388: cumulus_pallet_parachain_system::unincluded_segment::HrmpChannelUpdate */
    CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate: {
        msgCount: string;
        totalBytes: string;
    };
    /** Lookup392: polkadot_primitives::v5::UpgradeGoAhead */
    PolkadotPrimitivesV5UpgradeGoAhead: {
        _enum: string[];
    };
    /** Lookup393: cumulus_pallet_parachain_system::unincluded_segment::SegmentTracker<primitive_types::H256> */
    CumulusPalletParachainSystemUnincludedSegmentSegmentTracker: {
        usedBandwidth: string;
        hrmpWatermark: string;
        consumedGoAheadSignal: string;
    };
    /** Lookup395: polkadot_primitives::v5::UpgradeRestriction */
    PolkadotPrimitivesV5UpgradeRestriction: {
        _enum: string[];
    };
    /** Lookup396: cumulus_pallet_parachain_system::relay_state_snapshot::MessagingStateSnapshot */
    CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot: {
        dmqMqcHead: string;
        relayDispatchQueueRemainingCapacity: string;
        ingressChannels: string;
        egressChannels: string;
    };
    /** Lookup397: cumulus_pallet_parachain_system::relay_state_snapshot::RelayDispatchQueueRemainingCapacity */
    CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity: {
        remainingCount: string;
        remainingSize: string;
    };
    /** Lookup400: polkadot_primitives::v5::AbridgedHrmpChannel */
    PolkadotPrimitivesV5AbridgedHrmpChannel: {
        maxCapacity: string;
        maxTotalSize: string;
        maxMessageSize: string;
        msgCount: string;
        totalSize: string;
        mqcHead: string;
    };
    /** Lookup401: polkadot_primitives::v5::AbridgedHostConfiguration */
    PolkadotPrimitivesV5AbridgedHostConfiguration: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        maxUpwardQueueCount: string;
        maxUpwardQueueSize: string;
        maxUpwardMessageSize: string;
        maxUpwardMessageNumPerCandidate: string;
        hrmpMaxMessageNumPerCandidate: string;
        validationUpgradeCooldown: string;
        validationUpgradeDelay: string;
        asyncBackingParams: string;
    };
    /** Lookup402: polkadot_primitives::vstaging::AsyncBackingParams */
    PolkadotPrimitivesVstagingAsyncBackingParams: {
        maxCandidateDepth: string;
        allowedAncestryLen: string;
    };
    /** Lookup408: polkadot_core_primitives::OutboundHrmpMessage<polkadot_parachain_primitives::primitives::Id> */
    PolkadotCorePrimitivesOutboundHrmpMessage: {
        recipient: string;
        data: string;
    };
    /** Lookup409: cumulus_pallet_parachain_system::CodeUpgradeAuthorization<T> */
    CumulusPalletParachainSystemCodeUpgradeAuthorization: {
        codeHash: string;
        checkVersion: string;
    };
    /** Lookup410: cumulus_pallet_parachain_system::pallet::Error<T> */
    CumulusPalletParachainSystemError: {
        _enum: string[];
    };
    /** Lookup412: pallet_transaction_payment::Releases */
    PalletTransactionPaymentReleases: {
        _enum: string[];
    };
    /** Lookup413: pallet_evm::CodeMetadata */
    PalletEvmCodeMetadata: {
        _alias: {
            size_: string;
            hash_: string;
        };
        size_: string;
        hash_: string;
    };
    /** Lookup415: pallet_evm::pallet::Error<T> */
    PalletEvmError: {
        _enum: string[];
    };
    /** Lookup418: fp_rpc::TransactionStatus */
    FpRpcTransactionStatus: {
        transactionHash: string;
        transactionIndex: string;
        from: string;
        to: string;
        contractAddress: string;
        logs: string;
        logsBloom: string;
    };
    /** Lookup421: ethbloom::Bloom */
    EthbloomBloom: string;
    /** Lookup423: ethereum::receipt::ReceiptV3 */
    EthereumReceiptReceiptV3: {
        _enum: {
            Legacy: string;
            EIP2930: string;
            EIP1559: string;
        };
    };
    /** Lookup424: ethereum::receipt::EIP658ReceiptData */
    EthereumReceiptEip658ReceiptData: {
        statusCode: string;
        usedGas: string;
        logsBloom: string;
        logs: string;
    };
    /**
     * Lookup425:
     * ethereum::block::Block[ethereum::transaction::TransactionV2](ethereum::transaction::TransactionV2)
     */
    EthereumBlock: {
        header: string;
        transactions: string;
        ommers: string;
    };
    /** Lookup426: ethereum::header::Header */
    EthereumHeader: {
        parentHash: string;
        ommersHash: string;
        beneficiary: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        logsBloom: string;
        difficulty: string;
        number: string;
        gasLimit: string;
        gasUsed: string;
        timestamp: string;
        extraData: string;
        mixHash: string;
        nonce: string;
    };
    /** Lookup427: ethereum_types::hash::H64 */
    EthereumTypesHashH64: string;
    /** Lookup432: pallet_ethereum::pallet::Error<T> */
    PalletEthereumError: {
        _enum: string[];
    };
    /**
     * Lookup433:
     * pallet_parachain_staking::types::ParachainBondConfig[account::AccountId20](account::AccountId20)
     */
    PalletParachainStakingParachainBondConfig: {
        account: string;
        percent: string;
    };
    /** Lookup434: pallet_parachain_staking::types::RoundInfo<BlockNumber> */
    PalletParachainStakingRoundInfo: {
        current: string;
        first: string;
        length: string;
    };
    /** Lookup435: pallet_parachain_staking::types::Delegator<account::AccountId20, Balance> */
    PalletParachainStakingDelegator: {
        id: string;
        delegations: string;
        total: string;
        lessTotal: string;
        status: string;
    };
    /**
     * Lookup436:
     * pallet_parachain_staking::set::OrderedSet<pallet_parachain_staking::types::Bond<account::AccountId20,
     * Balance>>
     */
    PalletParachainStakingSetOrderedSet: string;
    /** Lookup437: pallet_parachain_staking::types::Bond<account::AccountId20, Balance> */
    PalletParachainStakingBond: {
        owner: string;
        amount: string;
    };
    /** Lookup439: pallet_parachain_staking::types::DelegatorStatus */
    PalletParachainStakingDelegatorStatus: {
        _enum: {
            Active: string;
            Leaving: string;
        };
    };
    /** Lookup440: pallet_parachain_staking::types::CandidateMetadata<Balance> */
    PalletParachainStakingCandidateMetadata: {
        bond: string;
        delegationCount: string;
        totalCounted: string;
        lowestTopDelegationAmount: string;
        highestBottomDelegationAmount: string;
        lowestBottomDelegationAmount: string;
        topCapacity: string;
        bottomCapacity: string;
        request: string;
        status: string;
    };
    /** Lookup441: pallet_parachain_staking::types::CapacityStatus */
    PalletParachainStakingCapacityStatus: {
        _enum: string[];
    };
    /** Lookup443: pallet_parachain_staking::types::CandidateBondLessRequest<Balance> */
    PalletParachainStakingCandidateBondLessRequest: {
        amount: string;
        whenExecutable: string;
    };
    /** Lookup444: pallet_parachain_staking::types::CollatorStatus */
    PalletParachainStakingCollatorStatus: {
        _enum: {
            Active: string;
            Idle: string;
            Leaving: string;
        };
    };
    /** Lookup446: pallet_parachain_staking::delegation_requests::ScheduledRequest<account::AccountId20, Balance> */
    PalletParachainStakingDelegationRequestsScheduledRequest: {
        delegator: string;
        whenExecutable: string;
        action: string;
    };
    /**
     * Lookup449:
     * pallet_parachain_staking::auto_compound::AutoCompoundConfig[account::AccountId20](account::AccountId20)
     */
    PalletParachainStakingAutoCompoundAutoCompoundConfig: {
        delegator: string;
        value: string;
    };
    /** Lookup451: pallet_parachain_staking::types::Delegations<account::AccountId20, Balance> */
    PalletParachainStakingDelegations: {
        delegations: string;
        total: string;
    };
    /**
     * Lookup453:
     * pallet_parachain_staking::set::BoundedOrderedSet<pallet_parachain_staking::types::Bond<account::AccountId20,
     * Balance>, S>
     */
    PalletParachainStakingSetBoundedOrderedSet: string;
    /** Lookup456: pallet_parachain_staking::types::CollatorSnapshot<account::AccountId20, Balance> */
    PalletParachainStakingCollatorSnapshot: {
        bond: string;
        delegations: string;
        total: string;
    };
    /** Lookup458: pallet_parachain_staking::types::BondWithAutoCompound<account::AccountId20, Balance> */
    PalletParachainStakingBondWithAutoCompound: {
        owner: string;
        amount: string;
        autoCompound: string;
    };
    /** Lookup459: pallet_parachain_staking::types::DelayedPayout<Balance> */
    PalletParachainStakingDelayedPayout: {
        roundIssuance: string;
        totalStakingReward: string;
        collatorCommission: string;
    };
    /** Lookup460: pallet_parachain_staking::inflation::InflationInfo<Balance> */
    PalletParachainStakingInflationInflationInfo: {
        expect: {
            min: string;
            ideal: string;
            max: string;
        };
        annual: {
            min: string;
            ideal: string;
            max: string;
        };
        round: {
            min: string;
            ideal: string;
            max: string;
        };
    };
    /** Lookup461: pallet_parachain_staking::pallet::Error<T> */
    PalletParachainStakingError: {
        _enum: string[];
    };
    /**
     * Lookup464: pallet_scheduler::Scheduled<Name,
     * frame_support::traits::preimages::Bounded<moonbase_runtime::RuntimeCall>, BlockNumber,
     * moonbase_runtime::OriginCaller, account::AccountId20>
     */
    PalletSchedulerScheduled: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /** Lookup466: pallet_scheduler::pallet::Error<T> */
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup472: pallet_democracy::types::ReferendumInfo<BlockNumber,
     * frame_support::traits::preimages::Bounded<moonbase_runtime::RuntimeCall>, Balance>
     */
    PalletDemocracyReferendumInfo: {
        _enum: {
            Ongoing: string;
            Finished: {
                approved: string;
                end: string;
            };
        };
    };
    /**
     * Lookup473: pallet_democracy::types::ReferendumStatus<BlockNumber,
     * frame_support::traits::preimages::Bounded<moonbase_runtime::RuntimeCall>, Balance>
     */
    PalletDemocracyReferendumStatus: {
        end: string;
        proposal: string;
        threshold: string;
        delay: string;
        tally: string;
    };
    /** Lookup474: pallet_democracy::types::Tally<Balance> */
    PalletDemocracyTally: {
        ayes: string;
        nays: string;
        turnout: string;
    };
    /** Lookup475: pallet_democracy::vote::Voting<Balance, account::AccountId20, BlockNumber, MaxVotes> */
    PalletDemocracyVoteVoting: {
        _enum: {
            Direct: {
                votes: string;
                delegations: string;
                prior: string;
            };
            Delegating: {
                balance: string;
                target: string;
                conviction: string;
                delegations: string;
                prior: string;
            };
        };
    };
    /** Lookup479: pallet_democracy::types::Delegations<Balance> */
    PalletDemocracyDelegations: {
        votes: string;
        capital: string;
    };
    /** Lookup480: pallet_democracy::vote::PriorLock<BlockNumber, Balance> */
    PalletDemocracyVotePriorLock: string;
    /** Lookup483: pallet_democracy::pallet::Error<T> */
    PalletDemocracyError: {
        _enum: string[];
    };
    /** Lookup485: pallet_collective::Votes<account::AccountId20, BlockNumber> */
    PalletCollectiveVotes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    /** Lookup486: pallet_collective::pallet::Error<T, I> */
    PalletCollectiveError: {
        _enum: string[];
    };
    /** Lookup488: pallet_treasury::Proposal<account::AccountId20, Balance> */
    PalletTreasuryProposal: {
        proposer: string;
        value: string;
        beneficiary: string;
        bond: string;
    };
    /** Lookup492: frame_support::PalletId */
    FrameSupportPalletId: string;
    /** Lookup493: pallet_treasury::pallet::Error<T, I> */
    PalletTreasuryError: {
        _enum: string[];
    };
    /** Lookup494: pallet_author_inherent::pallet::Error<T> */
    PalletAuthorInherentError: {
        _enum: string[];
    };
    /** Lookup495: pallet_crowdloan_rewards::pallet::RewardInfo<T> */
    PalletCrowdloanRewardsRewardInfo: {
        totalReward: string;
        claimedReward: string;
        contributedRelayAddresses: string;
    };
    /** Lookup497: pallet_crowdloan_rewards::pallet::Error<T> */
    PalletCrowdloanRewardsError: {
        _enum: string[];
    };
    /** Lookup498: pallet_author_mapping::pallet::RegistrationInfo<T> */
    PalletAuthorMappingRegistrationInfo: {
        _alias: {
            keys_: string;
        };
        account: string;
        deposit: string;
        keys_: string;
    };
    /** Lookup499: pallet_author_mapping::pallet::Error<T> */
    PalletAuthorMappingError: {
        _enum: string[];
    };
    /** Lookup502: pallet_proxy::ProxyDefinition<account::AccountId20, moonbase_runtime::ProxyType, BlockNumber> */
    PalletProxyProxyDefinition: {
        delegate: string;
        proxyType: string;
        delay: string;
    };
    /** Lookup506: pallet_proxy::Announcement<account::AccountId20, primitive_types::H256, BlockNumber> */
    PalletProxyAnnouncement: {
        real: string;
        callHash: string;
        height: string;
    };
    /** Lookup508: pallet_proxy::pallet::Error<T> */
    PalletProxyError: {
        _enum: string[];
    };
    /** Lookup509: pallet_maintenance_mode::pallet::Error<T> */
    PalletMaintenanceModeError: {
        _enum: string[];
    };
    /** Lookup510: pallet_identity::types::Registration<Balance, MaxJudgements, MaxAdditionalFields> */
    PalletIdentityRegistration: {
        judgements: string;
        deposit: string;
        info: string;
    };
    /** Lookup517: pallet_identity::types::RegistrarInfo<Balance, account::AccountId20> */
    PalletIdentityRegistrarInfo: {
        account: string;
        fee: string;
        fields: string;
    };
    /** Lookup519: pallet_identity::pallet::Error<T> */
    PalletIdentityError: {
        _enum: string[];
    };
    /** Lookup521: cumulus_pallet_xcmp_queue::InboundChannelDetails */
    CumulusPalletXcmpQueueInboundChannelDetails: {
        sender: string;
        state: string;
        messageMetadata: string;
    };
    /** Lookup522: cumulus_pallet_xcmp_queue::InboundState */
    CumulusPalletXcmpQueueInboundState: {
        _enum: string[];
    };
    /** Lookup525: polkadot_parachain_primitives::primitives::XcmpMessageFormat */
    PolkadotParachainPrimitivesPrimitivesXcmpMessageFormat: {
        _enum: string[];
    };
    /** Lookup528: cumulus_pallet_xcmp_queue::OutboundChannelDetails */
    CumulusPalletXcmpQueueOutboundChannelDetails: {
        recipient: string;
        state: string;
        signalsExist: string;
        firstIndex: string;
        lastIndex: string;
    };
    /** Lookup529: cumulus_pallet_xcmp_queue::OutboundState */
    CumulusPalletXcmpQueueOutboundState: {
        _enum: string[];
    };
    /** Lookup531: cumulus_pallet_xcmp_queue::QueueConfigData */
    CumulusPalletXcmpQueueQueueConfigData: {
        suspendThreshold: string;
        dropThreshold: string;
        resumeThreshold: string;
        thresholdWeight: string;
        weightRestrictDecay: string;
        xcmpMaxIndividualWeight: string;
    };
    /** Lookup533: cumulus_pallet_xcmp_queue::pallet::Error<T> */
    CumulusPalletXcmpQueueError: {
        _enum: string[];
    };
    /** Lookup534: cumulus_pallet_xcm::pallet::Error<T> */
    CumulusPalletXcmError: string;
    /** Lookup535: cumulus_pallet_dmp_queue::ConfigData */
    CumulusPalletDmpQueueConfigData: {
        maxIndividual: string;
    };
    /** Lookup536: cumulus_pallet_dmp_queue::PageIndexData */
    CumulusPalletDmpQueuePageIndexData: {
        beginUsed: string;
        endUsed: string;
        overweightCount: string;
    };
    /** Lookup539: cumulus_pallet_dmp_queue::pallet::Error<T> */
    CumulusPalletDmpQueueError: {
        _enum: string[];
    };
    /** Lookup540: pallet_xcm::pallet::QueryStatus<BlockNumber> */
    PalletXcmQueryStatus: {
        _enum: {
            Pending: {
                responder: string;
                maybeMatchQuerier: string;
                maybeNotify: string;
                timeout: string;
            };
            VersionNotifier: {
                origin: string;
                isActive: string;
            };
            Ready: {
                response: string;
                at: string;
            };
        };
    };
    /** Lookup544: staging_xcm::VersionedResponse */
    StagingXcmVersionedResponse: {
        _enum: {
            __Unused0: string;
            __Unused1: string;
            V2: string;
            V3: string;
        };
    };
    /** Lookup550: pallet_xcm::pallet::VersionMigrationStage */
    PalletXcmVersionMigrationStage: {
        _enum: {
            MigrateSupportedVersion: string;
            MigrateVersionNotifiers: string;
            NotifyCurrentTargets: string;
            MigrateAndNotifyOldTargets: string;
        };
    };
    /** Lookup553: staging_xcm::VersionedAssetId */
    StagingXcmVersionedAssetId: {
        _enum: {
            __Unused0: string;
            __Unused1: string;
            __Unused2: string;
            V3: string;
        };
    };
    /** Lookup554: pallet_xcm::pallet::RemoteLockedFungibleRecord<ConsumerIdentifier, MaxConsumers> */
    PalletXcmRemoteLockedFungibleRecord: {
        amount: string;
        owner: string;
        locker: string;
        consumers: string;
    };
    /** Lookup561: pallet_xcm::pallet::Error<T> */
    PalletXcmError: {
        _enum: string[];
    };
    /** Lookup562: pallet_assets::types::AssetDetails<Balance, account::AccountId20, DepositBalance> */
    PalletAssetsAssetDetails: {
        owner: string;
        issuer: string;
        admin: string;
        freezer: string;
        supply: string;
        deposit: string;
        minBalance: string;
        isSufficient: string;
        accounts: string;
        sufficients: string;
        approvals: string;
        status: string;
    };
    /** Lookup563: pallet_assets::types::AssetStatus */
    PalletAssetsAssetStatus: {
        _enum: string[];
    };
    /** Lookup565: pallet_assets::types::AssetAccount<Balance, DepositBalance, Extra, account::AccountId20> */
    PalletAssetsAssetAccount: {
        balance: string;
        status: string;
        reason: string;
        extra: string;
    };
    /** Lookup566: pallet_assets::types::AccountStatus */
    PalletAssetsAccountStatus: {
        _enum: string[];
    };
    /** Lookup567: pallet_assets::types::ExistenceReason<Balance, account::AccountId20> */
    PalletAssetsExistenceReason: {
        _enum: {
            Consumer: string;
            Sufficient: string;
            DepositHeld: string;
            DepositRefunded: string;
            DepositFrom: string;
        };
    };
    /** Lookup569: pallet_assets::types::Approval<Balance, DepositBalance> */
    PalletAssetsApproval: {
        amount: string;
        deposit: string;
    };
    /**
     * Lookup570: pallet_assets::types::AssetMetadata<DepositBalance,
     * bounded_collections::bounded_vec::BoundedVec<T, S>>
     */
    PalletAssetsAssetMetadata: {
        deposit: string;
        name: string;
        symbol: string;
        decimals: string;
        isFrozen: string;
    };
    /** Lookup572: pallet_assets::pallet::Error<T, I> */
    PalletAssetsError: {
        _enum: string[];
    };
    /** Lookup573: orml_xtokens::module::Error<T> */
    OrmlXtokensModuleError: {
        _enum: string[];
    };
    /** Lookup574: pallet_asset_manager::pallet::AssetInfo<T> */
    PalletAssetManagerAssetInfo: {
        creator: string;
        deposit: string;
    };
    /** Lookup576: pallet_asset_manager::pallet::Error<T> */
    PalletAssetManagerError: {
        _enum: string[];
    };
    /** Lookup577: pallet_migrations::pallet::Error<T> */
    PalletMigrationsError: {
        _enum: string[];
    };
    /** Lookup578: pallet_xcm_transactor::relay_indices::RelayChainIndices */
    PalletXcmTransactorRelayIndicesRelayChainIndices: {
        staking: string;
        utility: string;
        hrmp: string;
        bond: string;
        bondExtra: string;
        unbond: string;
        withdrawUnbonded: string;
        validate: string;
        nominate: string;
        chill: string;
        setPayee: string;
        setController: string;
        rebond: string;
        asDerivative: string;
        initOpenChannel: string;
        acceptOpenChannel: string;
        closeChannel: string;
        cancelOpenRequest: string;
    };
    /** Lookup579: pallet_xcm_transactor::pallet::Error<T> */
    PalletXcmTransactorError: {
        _enum: string[];
    };
    /** Lookup581: pallet_moonbeam_orbiters::types::CollatorPoolInfo[account::AccountId20](account::AccountId20) */
    PalletMoonbeamOrbitersCollatorPoolInfo: {
        orbiters: string;
        maybeCurrentOrbiter: string;
        nextOrbiter: string;
    };
    /** Lookup583: pallet_moonbeam_orbiters::types::CurrentOrbiter[account::AccountId20](account::AccountId20) */
    PalletMoonbeamOrbitersCurrentOrbiter: {
        accountId: string;
        removed: string;
    };
    /** Lookup584: pallet_moonbeam_orbiters::pallet::Error<T> */
    PalletMoonbeamOrbitersError: {
        _enum: string[];
    };
    /** Lookup585: pallet_ethereum_xcm::pallet::Error<T> */
    PalletEthereumXcmError: {
        _enum: string[];
    };
    /** Lookup586: pallet_randomness::types::RequestState<T> */
    PalletRandomnessRequestState: {
        request: string;
        deposit: string;
    };
    /** Lookup587: pallet_randomness::types::Request<Balance, pallet_randomness::types::RequestInfo<T>> */
    PalletRandomnessRequest: {
        refundAddress: string;
        contractAddress: string;
        fee: string;
        gasLimit: string;
        numWords: string;
        salt: string;
        info: string;
    };
    /** Lookup588: pallet_randomness::types::RequestInfo<T> */
    PalletRandomnessRequestInfo: {
        _enum: {
            BabeEpoch: string;
            Local: string;
        };
    };
    /** Lookup589: pallet_randomness::types::RequestType<T> */
    PalletRandomnessRequestType: {
        _enum: {
            BabeEpoch: string;
            Local: string;
        };
    };
    /** Lookup590: pallet_randomness::types::RandomnessResult<primitive_types::H256> */
    PalletRandomnessRandomnessResult: {
        randomness: string;
        requestCount: string;
    };
    /** Lookup591: pallet_randomness::pallet::Error<T> */
    PalletRandomnessError: {
        _enum: string[];
    };
    /**
     * Lookup595: pallet_conviction_voting::vote::Voting<Balance, account::AccountId20, BlockNumber,
     * PollIndex, MaxVotes>
     */
    PalletConvictionVotingVoteVoting: {
        _enum: {
            Casting: string;
            Delegating: string;
        };
    };
    /** Lookup596: pallet_conviction_voting::vote::Casting<Balance, BlockNumber, PollIndex, MaxVotes> */
    PalletConvictionVotingVoteCasting: {
        votes: string;
        delegations: string;
        prior: string;
    };
    /** Lookup600: pallet_conviction_voting::types::Delegations<Balance> */
    PalletConvictionVotingDelegations: {
        votes: string;
        capital: string;
    };
    /** Lookup601: pallet_conviction_voting::vote::PriorLock<BlockNumber, Balance> */
    PalletConvictionVotingVotePriorLock: string;
    /** Lookup602: pallet_conviction_voting::vote::Delegating<Balance, account::AccountId20, BlockNumber> */
    PalletConvictionVotingVoteDelegating: {
        balance: string;
        target: string;
        conviction: string;
        delegations: string;
        prior: string;
    };
    /** Lookup606: pallet_conviction_voting::pallet::Error<T, I> */
    PalletConvictionVotingError: {
        _enum: string[];
    };
    /**
     * Lookup607: pallet_referenda::types::ReferendumInfo<TrackId, moonbase_runtime::OriginCaller,
     * Moment, frame_support::traits::preimages::Bounded<moonbase_runtime::RuntimeCall>, Balance,
     * pallet_conviction_voting::types::Tally<Votes, Total>, account::AccountId20, ScheduleAddress>
     */
    PalletReferendaReferendumInfo: {
        _enum: {
            Ongoing: string;
            Approved: string;
            Rejected: string;
            Cancelled: string;
            TimedOut: string;
            Killed: string;
        };
    };
    /**
     * Lookup608: pallet_referenda::types::ReferendumStatus<TrackId, moonbase_runtime::OriginCaller,
     * Moment, frame_support::traits::preimages::Bounded<moonbase_runtime::RuntimeCall>, Balance,
     * pallet_conviction_voting::types::Tally<Votes, Total>, account::AccountId20, ScheduleAddress>
     */
    PalletReferendaReferendumStatus: {
        track: string;
        origin: string;
        proposal: string;
        enactment: string;
        submitted: string;
        submissionDeposit: string;
        decisionDeposit: string;
        deciding: string;
        tally: string;
        inQueue: string;
        alarm: string;
    };
    /** Lookup609: pallet_referenda::types::Deposit<account::AccountId20, Balance> */
    PalletReferendaDeposit: {
        who: string;
        amount: string;
    };
    /** Lookup612: pallet_referenda::types::DecidingStatus<BlockNumber> */
    PalletReferendaDecidingStatus: {
        since: string;
        confirming: string;
    };
    /** Lookup620: pallet_referenda::types::TrackInfo<Balance, Moment> */
    PalletReferendaTrackInfo: {
        name: string;
        maxDeciding: string;
        decisionDeposit: string;
        preparePeriod: string;
        decisionPeriod: string;
        confirmPeriod: string;
        minEnactmentPeriod: string;
        minApproval: string;
        minSupport: string;
    };
    /** Lookup621: pallet_referenda::types::Curve */
    PalletReferendaCurve: {
        _enum: {
            LinearDecreasing: {
                length: string;
                floor: string;
                ceil: string;
            };
            SteppedDecreasing: {
                begin: string;
                end: string;
                step: string;
                period: string;
            };
            Reciprocal: {
                factor: string;
                xOffset: string;
                yOffset: string;
            };
        };
    };
    /** Lookup624: pallet_referenda::pallet::Error<T, I> */
    PalletReferendaError: {
        _enum: string[];
    };
    /** Lookup625: pallet_preimage::RequestStatus<account::AccountId20, Balance> */
    PalletPreimageRequestStatus: {
        _enum: {
            Unrequested: {
                deposit: string;
                len: string;
            };
            Requested: {
                deposit: string;
                count: string;
                len: string;
            };
        };
    };
    /** Lookup630: pallet_preimage::pallet::Error<T> */
    PalletPreimageError: {
        _enum: string[];
    };
    /** Lookup631: pallet_whitelist::pallet::Error<T> */
    PalletWhitelistError: {
        _enum: string[];
    };
    /** Lookup634: pallet_multisig::Multisig<BlockNumber, Balance, account::AccountId20, MaxApprovals> */
    PalletMultisigMultisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    /** Lookup636: pallet_multisig::pallet::Error<T> */
    PalletMultisigError: {
        _enum: string[];
    };
    /** Lookup638: account::EthereumSignature */
    AccountEthereumSignature: string;
    /** Lookup640: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T> */
    FrameSystemExtensionsCheckNonZeroSender: string;
    /** Lookup641: frame_system::extensions::check_spec_version::CheckSpecVersion<T> */
    FrameSystemExtensionsCheckSpecVersion: string;
    /** Lookup642: frame_system::extensions::check_tx_version::CheckTxVersion<T> */
    FrameSystemExtensionsCheckTxVersion: string;
    /** Lookup643: frame_system::extensions::check_genesis::CheckGenesis<T> */
    FrameSystemExtensionsCheckGenesis: string;
    /** Lookup646: frame_system::extensions::check_nonce::CheckNonce<T> */
    FrameSystemExtensionsCheckNonce: string;
    /** Lookup647: frame_system::extensions::check_weight::CheckWeight<T> */
    FrameSystemExtensionsCheckWeight: string;
    /** Lookup648: pallet_transaction_payment::ChargeTransactionPayment<T> */
    PalletTransactionPaymentChargeTransactionPayment: string;
    /** Lookup650: moonbase_runtime::Runtime */
    MoonbaseRuntimeRuntime: string;
};
export default _default;
