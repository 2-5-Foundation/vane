"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @vitest-environment jsdom
 */
const vitest_1 = require("vitest");
const crypto_1 = require("crypto");
const extension_1 = require("./extension");
const types_1 = require("./types");
// we have to fake this API on node
const WellKnownChain_js_1 = require("../WellKnownChain.js");
if (!globalThis.crypto) {
    ;
    globalThis.crypto = {
        getRandomValues: (arr) => {
            if (!arr)
                return arr;
            const tmp = new Uint8Array(arr.byteLength);
            const randomBytesBuffer = (0, crypto_1.randomBytes)(tmp.length);
            tmp.set(randomBytesBuffer);
            const test = new DataView(arr.buffer);
            for (let i = 0; i < tmp.length; i++) {
                test.setUint8(i, tmp[i]);
            }
            return arr;
        },
    };
}
const getClientMessage = (timeout = 10) => new Promise((res, rej) => {
    const token = setTimeout(rej, timeout);
    const onMessage = ({ data }) => {
        if ((data === null || data === void 0 ? void 0 : data.origin) !== "substrate-connect-client")
            return;
        window.removeEventListener("message", onMessage);
        clearTimeout(token);
        res(data);
    };
    window.addEventListener("message", onMessage);
});
const postToClient = (msg) => {
    window.postMessage(msg, "*");
};
(0, vitest_1.describe)("SmoldotConnect::Extension", () => {
    (0, vitest_1.describe)("addChain", () => {
        (0, vitest_1.it)("adding a chain resolves the Promise upon receiving the `chain-ready` message", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addChain } = (0, extension_1.createScClient)();
            const chainPromise = addChain("");
            const addChainMessage = yield getClientMessage();
            (0, vitest_1.expect)(addChainMessage).toMatchObject({
                origin: "substrate-connect-client",
                type: "add-chain",
                chainSpec: "",
                potentialRelayChainIds: [],
            });
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMessage.chainId,
            });
            const chain = yield chainPromise;
            (0, vitest_1.expect)(typeof chain.remove).toBe("function");
            (0, vitest_1.expect)(typeof chain.sendJsonRpc).toBe("function");
        }));
        (0, vitest_1.it)("adding a chain rejects the Promise upon receiving an error while waiting for `chain-ready`", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addChain } = (0, extension_1.createScClient)();
            const chainPromise = addChain("");
            const addChainMessage = yield getClientMessage();
            postToClient({
                type: "error",
                origin: "substrate-connect-extension",
                chainId: addChainMessage.chainId,
                errorMessage: "test",
            });
            yield (0, vitest_1.expect)(chainPromise).rejects.toThrow("Error while creating the chain: test");
        }));
        (0, vitest_1.it)("propagates the correct potentialRelayChainIds", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addChain } = (0, extension_1.createScClient)();
            let chainPromise = addChain("");
            const addChainMsg1 = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg1.chainId,
            });
            const chain1 = yield chainPromise;
            chainPromise = addChain("");
            const addChainMsg2 = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg2.chainId,
            });
            yield chainPromise;
            chainPromise = addChain("");
            const addChainMsg3 = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg3.chainId,
            });
            yield chainPromise;
            const removeP = getClientMessage();
            chain1.remove();
            yield removeP;
            // adding an active chain from an unrelated client in order to ensure
            // that it doesn't show up in the list of `potentialRelayChainIds`
            const { addChain: addChain2 } = (0, extension_1.createScClient)();
            chainPromise = addChain2("");
            const addChainMsg4 = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg4.chainId,
            });
            yield chainPromise;
            addChain("");
            const addChainMsg5 = yield getClientMessage();
            (0, vitest_1.expect)(addChainMsg5).toMatchObject({
                type: "add-chain",
                chainSpec: "",
                potentialRelayChainIds: [addChainMsg2.chainId, addChainMsg3.chainId],
            });
        }));
    });
    (0, vitest_1.describe)("addWellKnownChain", () => {
        (0, vitest_1.it)("adding a chain resolves the Promise upon receiving the `chain-ready` message", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addWellKnownChain } = (0, extension_1.createScClient)();
            const chainPromise = addWellKnownChain(WellKnownChain_js_1.WellKnownChain.polkadot);
            const addChainMessage = yield getClientMessage();
            (0, vitest_1.expect)(addChainMessage).toMatchObject({
                origin: "substrate-connect-client",
                type: "add-well-known-chain",
                chainName: "polkadot",
            });
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMessage.chainId,
            });
            const chain = yield chainPromise;
            (0, vitest_1.expect)(typeof chain.remove).toBe("function");
            (0, vitest_1.expect)(typeof chain.sendJsonRpc).toBe("function");
        }));
    });
    (0, vitest_1.describe)("chain.remove", () => {
        (0, vitest_1.it)("removes the chain", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addChain } = (0, extension_1.createScClient)();
            const chainPromise = addChain("");
            const addChainMsg = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg.chainId,
            });
            const chain = yield chainPromise;
            chain.remove();
            const removeChainMsg = yield getClientMessage();
            (0, vitest_1.expect)(removeChainMsg).toEqual({
                origin: addChainMsg.origin,
                chainId: addChainMsg.chainId,
                type: "remove-chain",
            });
        }));
        (0, vitest_1.it)("throws if the chain has already been removed", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addChain } = (0, extension_1.createScClient)();
            const chainPromise = addChain("", () => { });
            const addChainMsg = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg.chainId,
            });
            const chain = yield chainPromise;
            chain.remove();
            yield getClientMessage();
            (0, vitest_1.expect)(() => chain.remove()).toThrow(types_1.AlreadyDestroyedError);
            (0, vitest_1.expect)(() => chain.sendJsonRpc("")).toThrow(types_1.AlreadyDestroyedError);
        }));
    });
    (0, vitest_1.describe)("CrashError", () => {
        (0, vitest_1.it)("correctly handles CrashErrors received from the Extension", () => __awaiter(void 0, void 0, void 0, function* () {
            const { addChain } = (0, extension_1.createScClient)();
            const chainPromise = addChain("", () => { });
            const addChainMsg = yield getClientMessage();
            postToClient({
                type: "chain-ready",
                origin: "substrate-connect-extension",
                chainId: addChainMsg.chainId,
            });
            const chain = yield chainPromise;
            postToClient({
                type: "error",
                origin: "substrate-connect-extension",
                chainId: addChainMsg.chainId,
                errorMessage: "Boom!",
            });
            // Wait for message to be delivered.
            yield new Promise((res) => {
                setTimeout(res, 100);
            });
            (0, vitest_1.expect)(() => chain.sendJsonRpc("")).toThrow(new types_1.CrashError("Extension has killed the chain: Boom!"));
            (0, vitest_1.expect)(() => chain.remove()).toThrow(new types_1.CrashError("Extension has killed the chain: Boom!"));
        }));
    });
    (0, vitest_1.it)("ignores other messages", () => __awaiter(void 0, void 0, void 0, function* () {
        const { addChain } = (0, extension_1.createScClient)();
        const chainPromise = addChain("", () => { });
        const addChainMsg = yield getClientMessage();
        window.postMessage(undefined, "*");
        window.postMessage({
            type: "error",
            origin: "wrong-substrate-connect-extension",
            chainId: addChainMsg.chainId,
            errorMessage: "boom!",
        }, "*");
        postToClient({
            type: "error",
            origin: "substrate-connect-extension",
            chainId: "wrong" + addChainMsg.chainId,
            errorMessage: "boom!",
        });
        postToClient({
            type: "chain-ready",
            origin: "substrate-connect-extension",
            chainId: addChainMsg.chainId,
        });
        const chain = yield chainPromise;
        (0, vitest_1.expect)(typeof chain.remove).toBe("function");
        (0, vitest_1.expect)(typeof chain.sendJsonRpc).toBe("function");
    }));
});
