import { ProviderConfig, MoonwallProvider, ProviderType, ViemClient } from '@moonwall/types';
import { ApiPromise } from '@polkadot/api';
import { Signer } from 'ethers';
import { Web3 } from 'web3';

declare class ProviderFactory {
    private providerConfig;
    private url;
    private privateKey;
    constructor(providerConfig: ProviderConfig);
    create(): MoonwallProvider;
    private createPolkadotJs;
    private createWeb3;
    private createEthers;
    private createViem;
    private createDefault;
    static prepare(providerConfigs: ProviderConfig[]): MoonwallProvider[];
    static prepareDefaultDev(): MoonwallProvider[];
    static prepareDefaultZombie(): MoonwallProvider[];
    static prepareNoEthDefaultZombie(): MoonwallProvider[];
}
interface ProviderInterface {
    name: string;
    api: any;
    type: ProviderType;
    greet: () => void | Promise<void> | {
        rtVersion: number;
        rtName: string;
    };
    disconnect: () => void | Promise<void> | any;
}
declare class ProviderInterfaceFactory {
    private name;
    private type;
    private connect;
    constructor(name: string, type: ProviderType, connect: () => any);
    create(): Promise<ProviderInterface>;
    private createPolkadotJs;
    private createWeb3;
    private createEthers;
    private createViem;
    static populate(name: string, type: ProviderType, connect: () => Promise<ApiPromise> | Signer | Web3 | Promise<ViemClient> | void): Promise<ProviderInterface>;
}
declare const vitestAutoUrl: string;

export { ProviderFactory, type ProviderInterface, ProviderInterfaceFactory, vitestAutoUrl };
