import "../chunk-UF3ELOOZ.js";
import {
  main
} from "../chunk-4LT4TEUB.js";
import {
  generateConfig
} from "../chunk-K2KVKH3X.js";
import {
  fetchArtifact
} from "../chunk-OFLP6IXX.js";
import "../chunk-X7BPU2SI.js";
import "../chunk-V365EHXB.js";
import {
  runNetworkCmd
} from "../chunk-DWALI2JA.js";
import {
  testCmd
} from "../chunk-NJDJMSQ4.js";
import "../chunk-N6GJ5CGR.js";
import "../chunk-RDW3KT5X.js";
import "../chunk-MA6EZVRY.js";
import "../chunk-47TGWJ6Q.js";
import "../chunk-WE3KBB4L.js";
import "../chunk-5FSDTNPM.js";
import "../chunk-3ZFRI75O.js";
import "../chunk-34NYWP54.js";
import "../chunk-YCTGYVKZ.js";
import "../chunk-ZRAV2GIF.js";
import "../chunk-WRSD6W42.js";
import "../chunk-3IRCD3RX.js";
import "../chunk-K44KZJFV.js";

// src/cmds/entrypoint.ts
import "@moonbeam-network/api-augment";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import dotenv from "dotenv";
dotenv.config();
var parsed = yargs(hideBin(process.argv)).options({
  configFile: {
    type: "string",
    alias: "c",
    description: "path to MoonwallConfig file",
    default: "./moonwall.config.json"
  }
}).parseSync();
process.env.MOON_CONFIG_PATH = parsed.configFile;
yargs(hideBin(process.argv)).usage("Usage: $0").version("2.0.0").options({
  configFile: {
    type: "string",
    alias: "c",
    description: "path to MoonwallConfig file",
    default: "./moonwall.config.json"
  }
}).middleware((argv) => {
  process.env.MOON_CONFIG_PATH = argv.configFile;
}).command(`init`, "Run tests for a given Environment", async () => {
  await generateConfig();
}).command(
  `download <bin> [ver] [path]`,
  "Download x86 artifact from GitHub",
  (yargs2) => {
    return yargs2.positional("bin", {
      describe: "Name of artifact to download\n[ moonbeam | polkadot | *-runtime ]"
    }).positional("ver", {
      describe: "Artifact version to download",
      default: "latest"
    }).positional("path", {
      describe: "Path where to save artifacts",
      type: "string",
      default: "./"
    }).option("overwrite", {
      describe: "If file exists, should it be overwritten?",
      type: "boolean",
      alias: "d",
      default: true
    }).option("output-name", {
      describe: "Rename downloaded file to this name",
      alias: "o",
      type: "string"
    });
  },
  async (argv) => {
    await fetchArtifact(argv);
  }
).command(
  `test <envName> [GrepTest]`,
  "Run tests for a given Environment",
  (yargs2) => {
    return yargs2.positional("envName", {
      describe: "Network environment to run tests against",
      array: true,
      string: true
    }).positional("GrepTest", {
      type: "string",
      description: "Pattern to grep test ID/Description to run"
    });
  },
  async (args) => {
    if (args.envName) {
      process.env.MOON_RUN_SCRIPTS = "true";
      await testCmd(args.envName.toString(), { testNamePattern: args.GrepTest }) ? process.exit(0) : process.exit(1);
    } else {
      console.log("\u274C No environment specified");
      console.log(`\u{1F449} Run 'pnpm moonwall --help' for more information`);
      process.exit(1);
    }
  }
).command(
  `run <envName> [GrepTest]`,
  "Start new network found in global config",
  (yargs2) => {
    return yargs2.positional("envName", {
      describe: "Network environment to start"
    }).positional("GrepTest", {
      type: "string",
      description: "Pattern to grep test ID/Description to run"
    });
  },
  async (argv) => {
    process.env.MOON_RUN_SCRIPTS = "true";
    await runNetworkCmd(argv);
    process.exit(0);
  }
).demandCommand(1).fail(async (msg) => {
  console.log(msg);
  await main();
}).help("h").alias("h", "help").parse();
