import {
  createChopsticksBlock,
  sendSetStorageRequest
} from "./chunk-KDVVUIRZ.js";
import {
  upgradeRuntimeChopsticks
} from "./chunk-X7TUDUSR.js";
import {
  MoonwallContext
} from "./chunk-RDW3KT5X.js";

// src/lib/handlers/chopsticksHandler.ts
import {
  ALITH_PRIVATE_KEY,
  BALTATHAR_PRIVATE_KEY,
  CHARLETH_PRIVATE_KEY,
  DOROTHY_PRIVATE_KEY
} from "@moonwall/util";
import { Keyring } from "@polkadot/api";
var chopsticksHandler = ({
  testCases,
  context,
  testCase,
  logger
}) => {
  const accountTypeLookup = () => {
    const metadata = ctx.polkadotJs().runtimeMetadata.asLatest;
    const systemPalletIndex = metadata.pallets.findIndex(
      (pallet) => pallet.name.toString() === "System"
    );
    const systemAccountStorageType = metadata.pallets[systemPalletIndex].storage.unwrap().items.find((storage) => storage.name.toString() === "Account").type;
    return metadata.lookup.getTypeDef(systemAccountStorageType.asMap.key).type;
  };
  const newKeyring = () => {
    const isEth = accountTypeLookup() == "AccountId20";
    const keyring = new Keyring({
      type: isEth ? "ethereum" : "sr25519"
    });
    return {
      alice: keyring.addFromUri(isEth ? ALITH_PRIVATE_KEY : "//Alice", { name: "Alice default" }),
      bob: keyring.addFromUri(isEth ? BALTATHAR_PRIVATE_KEY : "//Bob", { name: "Bob default" }),
      charlie: keyring.addFromUri(isEth ? CHARLETH_PRIVATE_KEY : "//Charlie", {
        name: "Charlie default"
      }),
      dave: keyring.addFromUri(isEth ? DOROTHY_PRIVATE_KEY : "//Dave", { name: "Dave default" })
    };
  };
  const ctx = {
    ...context,
    get isEthereumChain() {
      return accountTypeLookup() === "AccountId20";
    },
    get isSubstrateChain() {
      return accountTypeLookup() === "AccountId32";
    },
    get pjsApi() {
      return context.polkadotJs();
    },
    get keyring() {
      return newKeyring();
    },
    createBlock: async (options = {}) => await createChopsticksBlock(context, options),
    setStorage: async (params) => await sendSetStorageRequest(params),
    upgradeRuntime: async () => {
      await upgradeRuntimeChopsticks(ctx, (() => MoonwallContext.getContext().rtUpgradePath)());
    }
  };
  testCases({
    context: ctx,
    it: testCase,
    log: logger()
  });
};

export {
  chopsticksHandler
};
