import { MoonwallContract, GenericContext, PrecompileCallOptions, ContractCallOptions, ContractDeploymentOptions, DevModeContext } from '@moonwall/types';
import { Abi, Log } from 'viem';

declare function fetchCompiledContract<TAbi extends Abi>(contractName: string): MoonwallContract<TAbi>;
declare function recursiveSearch(dir: string, filename: string): string | null;
declare function interactWithPrecompileContract(context: GenericContext, callOptions: PrecompileCallOptions): Promise<any>;
declare function interactWithContract(context: GenericContext, callOptions: ContractCallOptions): Promise<any>;
declare function deployCreateCompiledContract<TOptions extends ContractDeploymentOptions>(context: DevModeContext, contractName: string, options?: TOptions): Promise<{
    contractAddress: `0x${string}`;
    logs: Log<bigint, number>[];
    hash: `0x${string}`;
    status: "success" | "reverted";
    abi: Abi;
    bytecode: `0x${string}`;
    methods: any;
}>;

export { deployCreateCompiledContract, fetchCompiledContract, interactWithContract, interactWithPrecompileContract, recursiveSearch };
