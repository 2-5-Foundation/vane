var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/internal/cmdFunctions/fetchArtifact.ts
var fetchArtifact_exports = {};
__export(fetchArtifact_exports, {
  fetchArtifact: () => fetchArtifact,
  getVersions: () => getVersions
});
module.exports = __toCommonJS(fetchArtifact_exports);
var import_promises2 = __toESM(require("fs/promises"), 1);
var import_path2 = __toESM(require("path"), 1);
var import_node_fetch2 = __toESM(require("node-fetch"), 1);
var import_semver = __toESM(require("semver"), 1);
var import_chalk = __toESM(require("chalk"), 1);

// src/internal/processHelpers.ts
var import_child_process = __toESM(require("child_process"), 1);
var import_node_util = require("util");
var import_debug = __toESM(require("debug"), 1);
var debug = (0, import_debug.default)("actions:runner");
var execAsync = (0, import_node_util.promisify)(import_child_process.default.exec);
async function runTask(cmd, { cwd, env } = {
  cwd: process.cwd()
}, title) {
  debug(`${title ? `Title: ${title}
` : ""}Running task on directory ${cwd}: ${cmd}
`);
  try {
    const result = await execAsync(cmd, { cwd, env });
    return result.stdout;
  } catch (error) {
    const status = error.status ? `[${error.status}]` : "[Unknown Status]";
    const message = error.message ? `${error.message}` : "No Error Message";
    debug(`Caught exception in command execution. Error[${status}] ${message}`);
    throw error;
  }
}

// src/internal/cmdFunctions/fetchArtifact.ts
var import_minimatch = require("minimatch");

// src/internal/cmdFunctions/downloader.ts
var import_cli_progress = require("cli-progress");
var import_node_fetch = __toESM(require("node-fetch"), 1);
var import_node_fs = __toESM(require("fs"), 1);
var progressBar;
var onStart = (length) => {
  progressBar = new import_cli_progress.SingleBar(
    {
      etaAsynchronousUpdate: true,
      etaBuffer: 40,
      format: "Downloading: [{bar}] {percentage}% | ETA: {eta_formatted} | {value}/{total}"
    },
    import_cli_progress.Presets.shades_classic
  );
  progressBar.start(length, 0);
};
var onProgress = (bytes) => {
  progressBar.update(bytes);
};
var onComplete = () => {
  progressBar.stop();
  process.stdout.write(`  \u{1F4BE} Saving binary artefact...`);
};
async function downloader(url, outputPath) {
  const tempPath = outputPath + ".tmp";
  const writeStream = import_node_fs.default.createWriteStream(tempPath);
  let transferredBytes = 0;
  const response = await (0, import_node_fetch.default)(url);
  if (!response.body) {
    throw new Error("No response body");
  }
  const readStream = response.body;
  readStream.pipe(writeStream);
  await new Promise((resolve, reject) => {
    const contentLength = parseInt(response.headers.get("Content-Length") || "0");
    onStart(contentLength);
    readStream.on("data", (chunk) => {
      transferredBytes += chunk.length;
      onProgress(transferredBytes);
    });
    readStream.on("end", () => {
      writeStream.end();
      onComplete();
      writeStream.close(() => resolve("Finished!"));
    });
    readStream.on("error", () => {
      reject("Error!");
    });
  });
  import_node_fs.default.writeFileSync(outputPath, import_node_fs.default.readFileSync(tempPath));
  import_node_fs.default.rmSync(tempPath);
}

// src/lib/repoDefinitions/moonbeam.ts
var repo = {
  name: "moonbeam",
  binaries: [
    {
      name: "moonbeam",
      defaultArgs: [
        "--no-hardware-benchmarks",
        "--no-telemetry",
        "--reserved-only",
        "--rpc-cors=all",
        "--no-grandpa",
        "--sealing=manual",
        "--force-authoring",
        "--no-prometheus",
        "--alice",
        "--chain=moonbase-dev",
        "--tmp"
      ]
    },
    { name: "moonbase-runtime" },
    { name: "moonbeam-runtime" },
    { name: "moonriver-runtime" }
  ],
  ghAuthor: "moonbeam-foundation",
  ghRepo: "moonbeam"
};
var moonbeam_default = repo;

// src/lib/repoDefinitions/polkadot.ts
var repo2 = {
  name: "polkadot",
  binaries: [
    { name: "polkadot" },
    { name: "polkadot-prepare-worker" },
    { name: "polkadot-execute-worker" }
  ],
  ghAuthor: "paritytech",
  ghRepo: "polkadot-sdk"
};
var polkadot_default = repo2;

// src/lib/repoDefinitions/tanssi.ts
var repo3 = {
  name: "tanssi",
  binaries: [
    { name: "tanssi-node", defaultArgs: ["--dev", "--sealing=manual", "--no-hardware-benchmarks"] },
    { name: "container-chain-template-simple-node" },
    { name: "container-chain-template-frontier-node" }
  ],
  ghAuthor: "moondance-labs",
  ghRepo: "tanssi"
};
var tanssi_default = repo3;

// src/lib/configReader.ts
var import_api_augment = require("@moonbeam-network/api-augment");
var import_promises = require("fs/promises");
var import_jsonc_parser = __toESM(require("jsonc-parser"), 1);
var import_path = __toESM(require("path"), 1);
var cachedConfig;
async function parseConfig(filePath) {
  let result;
  const file = await (0, import_promises.readFile)(filePath, "utf8");
  switch ((0, import_path.extname)(filePath)) {
    case ".json":
      result = JSON.parse(file);
      break;
    case ".config":
      result = import_jsonc_parser.default.parse(file);
      break;
    default:
      result = void 0;
      break;
  }
  return result;
}
async function importAsyncConfig() {
  if (cachedConfig) {
    return cachedConfig;
  }
  const configPath = process.env.MOON_CONFIG_PATH;
  const filePath = import_path.default.isAbsolute(configPath) ? configPath : import_path.default.join(process.cwd(), configPath);
  try {
    const config = await parseConfig(filePath);
    const replacedConfig = replaceEnvVars(config);
    cachedConfig = replacedConfig;
    return cachedConfig;
  } catch (e) {
    console.error(e);
    throw new Error(`Error import config at ${filePath}`);
  }
}
function replaceEnvVars(value) {
  if (typeof value === "string") {
    return value.replace(/\$\{([^}]+)\}/g, (match, group) => {
      const envVarValue = process.env[group];
      return envVarValue || match;
    });
  } else if (Array.isArray(value)) {
    return value.map(replaceEnvVars);
  } else if (typeof value === "object" && value !== null) {
    return Object.fromEntries(Object.entries(value).map(([k, v]) => [k, replaceEnvVars(v)]));
  } else {
    return value;
  }
}

// src/lib/repoDefinitions/index.ts
async function allReposAsync() {
  const defaultRepos = [moonbeam_default, polkadot_default, tanssi_default];
  const globalConfig = await importAsyncConfig();
  const importedRepos = globalConfig.additionalRepos ? globalConfig.additionalRepos : [];
  return [...defaultRepos, ...importedRepos];
}

// src/internal/cmdFunctions/fetchArtifact.ts
var import_node_child_process = require("child_process");
async function fetchArtifact(args) {
  if (await import_promises2.default.access(args.path).catch(() => true)) {
    console.log("Folder not exists, creating");
    import_promises2.default.mkdir(args.path);
  }
  const binary = args.bin;
  const repo4 = (await allReposAsync()).find(
    (network) => network.binaries.find((bin) => bin.name === binary)
  );
  if (!repo4) {
    throw new Error(`Downloading ${binary} unsupported`);
  }
  const url = `https://api.github.com/repos/${repo4.ghAuthor}/${repo4.ghRepo}/releases`;
  const enteredPath = args.path ? args.path : "tmp/";
  const releases = await (await (0, import_node_fetch2.default)(url)).json();
  const release = binary.includes("-runtime") ? releases.find((release2) => {
    if (args.ver === "latest") {
      return release2.assets.find((asset2) => asset2.name.includes(binary));
    } else {
      return release2.assets.find((asset2) => asset2.name === `${binary}-${args.ver}.wasm`);
    }
  }) : args.ver === "latest" ? releases.find((release2) => release2.assets.find((asset2) => asset2.name === binary)) : releases.filter((release2) => release2.tag_name.includes(args.ver)).find((release2) => release2.assets.find((asset2) => (0, import_minimatch.minimatch)(asset2.name, binary)));
  if (release == null) {
    throw new Error(`Release not found for ${args.ver}`);
  }
  const asset = binary.includes("-runtime") ? release.assets.find((asset2) => asset2.name.includes(binary) && asset2.name.includes("wasm")) : release.assets.find((asset2) => (0, import_minimatch.minimatch)(asset2.name, binary));
  if (!binary.includes("-runtime")) {
    const url2 = asset.browser_download_url;
    const filename = import_path2.default.basename(url2);
    const binPath = import_path2.default.join("./", enteredPath, filename);
    await downloader(url2, binPath);
    await import_promises2.default.chmod(binPath, "755");
    if (filename.endsWith(".tar.gz")) {
      const outputBuffer = (0, import_node_child_process.execSync)(`tar -xzvf ${binPath}`);
      const cleaned = outputBuffer.toString().split("\n")[0].split("/")[0];
      const version = (await runTask(`./${cleaned} --version`)).trim();
      process.stdout.write(` ${import_chalk.default.green(version.trim())} \u2713
`);
      return;
    } else {
      const version = (await runTask(`./${binPath} --version`)).trim();
      process.stdout.write(` ${import_chalk.default.green(version.trim())} \u2713
`);
      return;
    }
  } else {
    const binaryPath = import_path2.default.join("./", args.path, `${args.bin}-${args.ver}.wasm`);
    await downloader(asset.browser_download_url, binaryPath);
    await import_promises2.default.chmod(binaryPath, "755");
    process.stdout.write(` ${import_chalk.default.green("done")} \u2713
`);
    return;
  }
}
async function getVersions(name, runtime = false) {
  const repo4 = (await allReposAsync()).find(
    (network) => network.binaries.find((bin) => bin.name === name)
  );
  if (!repo4) {
    throw new Error(`Network not found for ${name}`);
  }
  const url = `https://api.github.com/repos/${repo4.ghAuthor}/${repo4.ghRepo}/releases`;
  const releases = await (await (0, import_node_fetch2.default)(url)).json();
  const versions = releases.map((release) => {
    let tag = release.tag_name;
    if (release.tag_name.includes("v")) {
      tag = tag.split("v")[1];
    }
    if (tag.includes("-rc")) {
      tag = tag.split("-rc")[0];
    }
    return tag;
  }).filter(
    (version) => runtime && version.includes("runtime") || !runtime && !version.includes("runtime")
  ).map((version) => version.replace("runtime-", ""));
  const set = new Set(versions);
  return runtime ? [...set] : [...set].sort(
    (a, b) => import_semver.default.valid(a) && import_semver.default.valid(b) ? import_semver.default.rcompare(a, b) : a
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fetchArtifact,
  getVersions
});
