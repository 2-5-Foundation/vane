import {
  executeTests
} from "./chunk-NJDJMSQ4.js";
import {
  clearNodeLogs,
  reportLogLocation
} from "./chunk-N6GJ5CGR.js";
import {
  MoonwallContext,
  runNetworkOnly
} from "./chunk-RDW3KT5X.js";
import {
  sendIpcMessage
} from "./chunk-MA6EZVRY.js";
import {
  commonChecks
} from "./chunk-WRSD6W42.js";
import {
  cacheConfig,
  importAsyncConfig,
  loadEnvVars
} from "./chunk-3IRCD3RX.js";

// src/cmds/runNetwork.ts
import chalk from "chalk";
import clear from "clear";
import fs, { promises as fsPromises } from "fs";
import inquirer from "inquirer";
import PressToContinuePrompt from "inquirer-press-to-continue";
import WebSocket from "ws";
import { parse } from "yaml";
inquirer.registerPrompt("press-to-continue", PressToContinuePrompt);
var lastSelected = 0;
async function runNetworkCmd(args) {
  await cacheConfig();
  process.env.MOON_TEST_ENV = args.envName;
  const globalConfig = await importAsyncConfig();
  const env = globalConfig.environments.find(({ name }) => name === args.envName);
  if (!env) {
    const envList = globalConfig.environments.map((env2) => env2.name);
    throw new Error(
      `No environment found in config for: ${chalk.bgWhiteBright.blackBright(
        args.envName
      )}
 Environments defined in config are: ${envList}
`
    );
  }
  loadEnvVars();
  await commonChecks(env);
  const testFileDirs = env.testFileDir;
  const foundation = env.foundation.type;
  const questions = [
    {
      type: "confirm",
      name: "Quit",
      message: "\u2139\uFE0F  Are you sure you'd like to close network and quit? \n",
      default: false
    },
    {
      name: "Choice",
      type: "list",
      message: "What would you like todo now",
      choices: ["Chill", "Info", "Test", "Quit"]
    },
    {
      name: "MenuChoice",
      type: "list",
      message: `Environment : ${chalk.bgGray.cyanBright(args.envName)}
Please select a choice: `,
      default: () => lastSelected,
      pageSize: 10,
      choices: [
        {
          name: "Tail:      Print the logs of the current running node to this console",
          value: 1,
          short: "tail"
        },
        {
          name: `Info:      Display Information about this environment ${args.envName}`,
          value: 2,
          short: "info"
        },
        {
          name: foundation == "dev" || foundation == "chopsticks" || foundation == "zombie" ? `Command:   Run command on network (${chalk.bgGrey.cyanBright(foundation)})` : chalk.dim(
            `Not applicable for foundation type (${chalk.bgGrey.cyanBright(foundation)})`
          ),
          value: 3,
          short: "cmd",
          disabled: foundation !== "dev" && foundation !== "chopsticks" && foundation !== "zombie"
        },
        {
          name: testFileDirs.length > 0 ? "Test:      Execute tests registered for this environment   (" + chalk.bgGrey.cyanBright(testFileDirs) + ")" : chalk.dim("Test:    NO TESTS SPECIFIED"),
          value: 4,
          disabled: testFileDirs.length > 0 ? false : true,
          short: "test"
        },
        {
          name: testFileDirs.length > 0 ? "GrepTest:  Execute individual test(s) based on grepping the name / ID (" + chalk.bgGrey.cyanBright(testFileDirs) + ")" : chalk.dim("Test:    NO TESTS SPECIFIED"),
          value: 5,
          disabled: testFileDirs.length > 0 ? false : true,
          short: "grep"
        },
        new inquirer.Separator(),
        {
          name: "Quit:      Close network and quit the application",
          value: 6,
          short: "quit"
        }
      ],
      filter(val) {
        return val;
      }
    },
    {
      name: "NetworkStarted",
      type: "press-to-continue",
      anyKey: true,
      pressToContinueMessage: "\u2705  Press any key to continue...\n"
    }
  ];
  if (env.foundation.type == "dev" && !env.foundation.launchSpec[0].retainAllLogs || env.foundation.type == "chopsticks" && !env.foundation.launchSpec[0].retainAllLogs) {
    clearNodeLogs();
  }
  await runNetworkOnly();
  clear();
  const portsList = await reportServicePorts();
  reportLogLocation();
  portsList.forEach(
    ({ port }) => console.log(`  \u{1F5A5}\uFE0F   https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A${port}`)
  );
  if (!args.GrepTest) {
    await inquirer.prompt(questions.find(({ name }) => name == "NetworkStarted"));
  } else {
    process.env.MOON_RECYCLE = "true";
    process.env.MOON_GREP = await args.GrepTest;
    await executeTests(env, { testNamePattern: await args.GrepTest });
  }
  mainloop:
    for (; ; ) {
      const choice = await inquirer.prompt(questions.find(({ name }) => name == "MenuChoice"));
      const env2 = globalConfig.environments.find(({ name }) => name === args.envName);
      switch (choice.MenuChoice) {
        case 1:
          clear();
          await resolveTailChoice(env2);
          lastSelected = 0;
          clear();
          break;
        case 2:
          await resolveInfoChoice(env2);
          lastSelected = 1;
          break;
        case 3:
          env2.foundation.type !== "zombie" ? await resolveCommandChoice() : await resolveZombieCommandChoice();
          lastSelected = 2;
          break;
        case 4:
          await resolveTestChoice(env2);
          lastSelected = 3;
          break;
        case 5:
          await resolveGrepChoice(env2);
          lastSelected = 4;
          break;
        case 6: {
          const quit = await inquirer.prompt(questions.find(({ name }) => name == "Quit"));
          if (quit.Quit === true) {
            break mainloop;
          }
          break;
        }
        default:
          throw new Error("invalid value");
      }
    }
  await MoonwallContext.destroy();
}
var reportServicePorts = async () => {
  const ctx = MoonwallContext.getContext();
  const portsList = [];
  const globalConfig = await importAsyncConfig();
  const config = globalConfig.environments.find(({ name }) => name == process.env.MOON_TEST_ENV);
  if (config.foundation.type == "dev") {
    const port = ctx.environment.nodes[0].args.find((a) => a.includes("ws-port") || a.includes("rpc-port")).split("=")[1] || "9944";
    portsList.push({ port, name: "dev" });
  } else if (config.foundation.type == "chopsticks") {
    portsList.push(
      ...await Promise.all(
        config.foundation.launchSpec.map(async ({ configPath, name }) => {
          const yaml = parse((await fsPromises.readFile(configPath)).toString());
          return { name, port: yaml.port || "8000" };
        })
      )
    );
  } else if (config.foundation.type == "zombie") {
    ctx.zombieNetwork.relay.forEach(({ wsUri, name }) => {
      portsList.push({ name, port: wsUri.split("ws://127.0.0.1:")[1] });
    });
    Object.keys(ctx.zombieNetwork.paras).forEach((paraId) => {
      ctx.zombieNetwork.paras[paraId].nodes.forEach(({ wsUri, name }) => {
        portsList.push({ name, port: wsUri.split("ws://127.0.0.1:")[1] });
      });
    });
  }
  portsList.forEach(
    ({ name, port }) => console.log(`  \u{1F310}  Node ${name} has started, listening on ports - Websocket: ${port}`)
  );
  return portsList;
};
var resolveZombieCommandChoice = async () => {
  const choice = await inquirer.prompt({
    name: "cmd",
    type: "list",
    choices: [
      { name: "\u267B\uFE0F  Restart Node", value: "restart" },
      { name: "\u{1F5E1}\uFE0F  Kill Node", value: "kill" },
      new inquirer.Separator(),
      { name: "\u{1F519}  Go Back", value: "back" }
    ],
    message: "What command would you like to run? ",
    default: "back"
  });
  if (choice.cmd == "back") {
    return;
  } else {
    const whichNode = await inquirer.prompt({
      name: "nodeName",
      type: "input",
      message: `Which node would you like to ${choice.cmd}? `
    });
    try {
      await sendIpcMessage({
        cmd: choice.cmd,
        nodeName: whichNode.nodeName,
        text: `Running ${choice.cmd} on ${whichNode.nodeName}`
      });
    } catch (e) {
      console.error("Error: ");
      console.error(e.message);
    }
  }
  return;
};
var resolveCommandChoice = async () => {
  const choice = await inquirer.prompt({
    name: "cmd",
    type: "list",
    choices: [
      { name: "\u{1F197}  Create Block", value: "createblock" },
      { name: "\u{1F195}  Create Unfinalized Block", value: "createUnfinalizedBlock" },
      { name: "#\uFE0F\u20E3   Create N Blocks", value: "createNBlocks" },
      new inquirer.Separator(),
      { name: "\u{1F519}  Go Back", value: "back" }
    ],
    message: `What command would you like to run? `,
    default: "createBlock"
  });
  const ctx = await MoonwallContext.getContext().connectEnvironment();
  const api = ctx.providers.find((a) => a.type == "polkadotJs").api;
  const globalConfig = await importAsyncConfig();
  const config = globalConfig.environments.find(({ name }) => name == process.env.MOON_TEST_ENV);
  const sendNewBlockCmd = async (count = 1) => {
    const port = config.foundation.type == "chopsticks" ? await Promise.all(
      config.foundation.launchSpec.map(async ({ configPath }) => {
        const yaml = parse((await fsPromises.readFile(configPath)).toString());
        return yaml.port || "8000";
      })
    ) : void 0;
    const websocketUrl = `ws://127.0.0.1:${port}`;
    const socket = new WebSocket(websocketUrl);
    socket.on("open", () => {
      socket.send(
        JSON.stringify({ jsonrpc: "2.0", id: 1, method: "dev_newBlock", params: [{ count }] })
      );
      socket.close();
    });
  };
  switch (choice.cmd) {
    case "createblock":
      ctx.foundation == "dev" ? await api.rpc.engine.createBlock(true, true) : ctx.foundation == "chopsticks" ? await sendNewBlockCmd() : void 0;
      break;
    case "createUnfinalizedBlock":
      ctx.foundation == "chopsticks" ? console.log("Not supported") : await api.rpc.engine.createBlock(true, false);
      break;
    case "createNBlocks": {
      const result = await new inquirer.prompt({
        name: "n",
        type: "number",
        message: `How many blocks? `
      });
      if (ctx.foundation == "dev") {
        const executeSequentially = async (remaining) => {
          if (remaining === 0) {
            return;
          }
          await api.rpc.engine.createBlock(true, true);
          await executeSequentially(remaining - 1);
        };
        await executeSequentially(result.n);
      }
      if (ctx.foundation == "chopsticks") {
        await sendNewBlockCmd(result.n);
      }
      break;
    }
    case "back":
      break;
  }
  return;
};
var resolveInfoChoice = async (env) => {
  console.log(chalk.bgWhite.blackBright("Node Launch args:"));
  console.dir(MoonwallContext.getContext().environment, { depth: null });
  console.log(chalk.bgWhite.blackBright("Launch Spec in Config File:"));
  console.dir(env, { depth: null });
  const portsList = await reportServicePorts();
  reportLogLocation();
  portsList.forEach(
    ({ port }) => console.log(`  \u{1F5A5}\uFE0F   https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A${port}`)
  );
};
var resolveGrepChoice = async (env, silent = false) => {
  const choice = await inquirer.prompt({
    name: "grep",
    type: "input",
    message: `What pattern would you like to filter for (ID/Title): `,
    default: process.env.MOON_GREP || "D01T01"
  });
  process.env.MOON_RECYCLE = "true";
  process.env.MOON_GREP = await choice.grep;
  const opts = { testNamePattern: await choice.grep, silent };
  if (silent) {
    opts["reporters"] = ["dot"];
  }
  return await executeTests(env, opts);
};
var resolveTestChoice = async (env, silent = false) => {
  process.env.MOON_RECYCLE = "true";
  const opts = { silent };
  if (silent) {
    opts["reporters"] = ["dot"];
  }
  return await executeTests(env, opts);
};
var resolveTailChoice = async (env) => {
  let tailing = true;
  let zombieNodePointer = 0;
  let bottomBarContents = "";
  let switchNode;
  let zombieContent;
  let zombieNodes;
  const resumePauseProse = [
    `, ${chalk.bgWhite.black("[p]")} Pause tail`,
    `, ${chalk.bgWhite.black("[r]")} Resume tail`
  ];
  const bottomBarBase = `\u{1F4DC} Tailing Logs, commands: ${chalk.bgWhite.black(
    "[q]"
  )} Quit, ${chalk.bgWhite.black("[t]")} Test, ${chalk.bgWhite.black("[g]")} Grep test`;
  bottomBarContents = bottomBarBase + resumePauseProse[0];
  const ui = new inquirer.ui.BottomBar({
    bottomBar: bottomBarContents + "\n"
  });
  for (; ; ) {
    clear();
    if (process.env.MOON_ZOMBIE_NODES) {
      zombieNodes = process.env.MOON_ZOMBIE_NODES ? process.env.MOON_ZOMBIE_NODES.split("|") : void 0;
      zombieContent = `, ${chalk.bgWhite.black("[,]")} Next Log, ${chalk.bgWhite.black(
        "[.]"
      )} Previous Log  | CurrentLog: ${chalk.bgWhite.black(
        `${zombieNodes[zombieNodePointer]} (${zombieNodePointer + 1}/${zombieNodes.length})`
      )}`;
      bottomBarContents = bottomBarBase + resumePauseProse[tailing ? 0 : 1] + zombieContent;
      ui.updateBottomBar(bottomBarContents, "\n");
    }
    switchNode = false;
    await new Promise(async (resolve) => {
      const onData = (chunk) => ui.log.write(chunk.toString());
      const logFilePath = process.env.MOON_ZOMBIE_NODES ? `${process.env.MOON_ZOMBIE_DIR}/${zombieNodes[zombieNodePointer]}.log` : process.env.MOON_LOG_LOCATION;
      let currentReadPosition = 0;
      const printLogs = (newReadPosition, currentReadPosition2) => {
        const stream = fs.createReadStream(logFilePath, {
          start: currentReadPosition2,
          end: newReadPosition
        });
        stream.on("data", onData);
        stream.on("end", () => {
          currentReadPosition2 = newReadPosition;
        });
      };
      const readLog = () => {
        const stats = fs.statSync(logFilePath);
        const newReadPosition = stats.size;
        if (newReadPosition > currentReadPosition && tailing) {
          printLogs(newReadPosition, currentReadPosition);
        }
      };
      const incrPtr = () => {
        zombieNodePointer = (zombieNodePointer + 1) % zombieNodes.length;
      };
      const decrPtr = () => {
        zombieNodePointer = (zombieNodePointer - 1 + zombieNodes.length) % zombieNodes.length;
      };
      printLogs(fs.statSync(logFilePath).size, 0);
      const renderBottomBar = (...parts) => {
        const content = process.env.MOON_ZOMBIE_NODES ? bottomBarBase + " " + parts?.join(" ") + zombieContent + "\n" : bottomBarBase + " " + parts?.join(" ") + "\n";
        ui.updateBottomBar(content);
      };
      const handleInputData = async (key) => {
        ui.rl.input.pause();
        const char = key.toString().trim();
        if (char === "p") {
          tailing = false;
          renderBottomBar(resumePauseProse[1]);
        }
        if (char === "r") {
          printLogs(fs.statSync(logFilePath).size, currentReadPosition);
          tailing = true;
          renderBottomBar(resumePauseProse[0]);
        }
        if (char === "q") {
          ui.rl.input.removeListener("data", handleInputData);
          ui.rl.input.pause();
          fs.unwatchFile(logFilePath);
          resolve("");
        }
        if (char === "t") {
          await resolveTestChoice(env, true);
          renderBottomBar(resumePauseProse[tailing ? 0 : 1]);
        }
        if (char === ",") {
          ui.rl.input.removeListener("data", handleInputData);
          ui.rl.input.pause();
          fs.unwatchFile(logFilePath);
          switchNode = true;
          incrPtr();
          resolve("");
        }
        if (char === ".") {
          ui.rl.input.removeListener("data", handleInputData);
          ui.rl.input.pause();
          fs.unwatchFile(logFilePath);
          switchNode = true;
          decrPtr();
          resolve("");
        }
        if (char === "g") {
          ui.rl.input.pause();
          tailing = false;
          await resolveGrepChoice(env, true);
          renderBottomBar(resumePauseProse[tailing ? 0 : 1]);
          tailing = true;
          ui.rl.input.resume();
        }
        ui.rl.input.resume();
      };
      ui.rl.input.on("data", handleInputData);
      fs.watchFile(logFilePath, () => {
        readLog();
      });
    });
    if (!switchNode) {
      break;
    }
  }
  ui.close();
};

export {
  runNetworkCmd
};
