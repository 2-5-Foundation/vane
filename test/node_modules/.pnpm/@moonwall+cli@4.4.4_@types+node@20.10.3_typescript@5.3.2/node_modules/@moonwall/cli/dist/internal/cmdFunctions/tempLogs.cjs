var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/internal/cmdFunctions/tempLogs.ts
var tempLogs_exports = {};
__export(tempLogs_exports, {
  clearNodeLogs: () => clearNodeLogs,
  reportLogLocation: () => reportLogLocation
});
module.exports = __toCommonJS(tempLogs_exports);
var import_path = __toESM(require("path"), 1);
var import_fs = __toESM(require("fs"), 1);
function clearNodeLogs(silent = true) {
  const dirPath = import_path.default.join(process.cwd(), "tmp", "node_logs");
  if (!import_fs.default.existsSync(dirPath)) {
    import_fs.default.mkdirSync(dirPath, { recursive: true });
  }
  const files = import_fs.default.readdirSync(dirPath);
  for (const file of files) {
    !silent && console.log(`Deleting log: ${file}`);
    if (file.endsWith(".log")) {
      import_fs.default.unlinkSync(import_path.default.join(dirPath, file));
    }
  }
}
function reportLogLocation(silent = false) {
  const dirPath = import_path.default.join(process.cwd(), "tmp", "node_logs");
  const result = import_fs.default.readdirSync(dirPath);
  let consoleMessage = "";
  let filePath = "";
  try {
    filePath = process.env.MOON_ZOMBIE_DIR ? process.env.MOON_ZOMBIE_DIR : process.env.MOON_LOG_LOCATION ? process.env.MOON_LOG_LOCATION : import_path.default.join(dirPath, result.find((file) => import_path.default.extname(file) == ".log"));
    consoleMessage = `  \u{1FAB5}   Log location: ${filePath}`;
  } catch (e) {
    console.error(e);
  }
  !silent && console.log(consoleMessage);
  return filePath.trim();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clearNodeLogs,
  reportLogLocation
});
