import {
  upgradeRuntime
} from "./chunk-X7TUDUSR.js";
import {
  MoonwallContext
} from "./chunk-RDW3KT5X.js";
import {
  sendIpcMessage
} from "./chunk-MA6EZVRY.js";

// src/lib/handlers/zombieHandler.ts
import { alith } from "@moonwall/util";
var zombieHandler = ({
  testCases,
  context,
  testCase,
  logger
}) => {
  testCases({
    context: {
      ...context,
      waitBlock: async (blocksToWaitFor = 1, chain = "parachain", mode = "quantity") => {
        const ctx = MoonwallContext.getContext();
        const provider = ctx.providers.find((prov) => prov.name === chain);
        if (!provider) {
          throw new Error(`Provider '${chain}' not found`);
        }
        const api = provider.api;
        const currentBlockNumber = (await api.rpc.chain.getBlock()).block.header.number.toNumber();
        for (; ; ) {
          await new Promise((resolve) => setTimeout(resolve, 1e3));
          const newBlockNumber = (await api.rpc.chain.getBlock()).block.header.number.toNumber();
          if (mode === "quantity" && newBlockNumber >= currentBlockNumber + blocksToWaitFor) {
            break;
          } else if (mode === "height" && newBlockNumber >= blocksToWaitFor) {
            break;
          }
        }
      },
      upgradeRuntime: async (options = {}) => {
        const ctx = MoonwallContext.getContext();
        const provider = ctx.providers.find((prov) => prov.name === "parachain");
        if (!provider) {
          throw new Error(`Provider 'parachain' not found`);
        }
        const api = provider.api;
        const params = {
          runtimeName: options.runtimeName || "moonbase",
          runtimeTag: options.runtimeTag || "local",
          localPath: options.localPath || ctx.rtUpgradePath,
          useGovernance: options.useGovernance || false,
          waitMigration: options.waitMigration || true,
          from: options.from || alith
        };
        if (options.logger) {
          params.logger = options.logger;
        }
        await upgradeRuntime(api, params);
      },
      restartNode: async (nodeName) => {
        await sendIpcMessage({
          text: `Restarting node ${nodeName}`,
          cmd: "restart",
          nodeName
        });
      },
      pauseNode: async (nodeName) => {
        await sendIpcMessage({
          text: `Pausing node ${nodeName}`,
          cmd: "pause",
          nodeName
        });
      },
      resumeNode: async (nodeName) => {
        await sendIpcMessage({
          text: `Resuming node ${nodeName}`,
          cmd: "resume",
          nodeName
        });
      },
      killNode: async (nodeName) => {
        await sendIpcMessage({
          text: `Killing node ${nodeName}`,
          cmd: "kill",
          nodeName
        });
      },
      isUp: async (nodeName) => {
        const response = await sendIpcMessage({
          text: `Checking if node ${nodeName} is up`,
          cmd: "isup",
          nodeName
        });
        return response.status === "success";
      }
    },
    it: testCase,
    log: logger()
  });
};

export {
  zombieHandler
};
