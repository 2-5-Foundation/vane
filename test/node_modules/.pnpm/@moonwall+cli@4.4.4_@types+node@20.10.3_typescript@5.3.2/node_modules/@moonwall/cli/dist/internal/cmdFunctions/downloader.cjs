var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/internal/cmdFunctions/downloader.ts
var downloader_exports = {};
__export(downloader_exports, {
  downloader: () => downloader
});
module.exports = __toCommonJS(downloader_exports);
var import_cli_progress = require("cli-progress");
var import_node_fetch = __toESM(require("node-fetch"), 1);
var import_node_fs = __toESM(require("fs"), 1);
var progressBar;
var onStart = (length) => {
  progressBar = new import_cli_progress.SingleBar(
    {
      etaAsynchronousUpdate: true,
      etaBuffer: 40,
      format: "Downloading: [{bar}] {percentage}% | ETA: {eta_formatted} | {value}/{total}"
    },
    import_cli_progress.Presets.shades_classic
  );
  progressBar.start(length, 0);
};
var onProgress = (bytes) => {
  progressBar.update(bytes);
};
var onComplete = () => {
  progressBar.stop();
  process.stdout.write(`  \u{1F4BE} Saving binary artefact...`);
};
async function downloader(url, outputPath) {
  const tempPath = outputPath + ".tmp";
  const writeStream = import_node_fs.default.createWriteStream(tempPath);
  let transferredBytes = 0;
  const response = await (0, import_node_fetch.default)(url);
  if (!response.body) {
    throw new Error("No response body");
  }
  const readStream = response.body;
  readStream.pipe(writeStream);
  await new Promise((resolve, reject) => {
    const contentLength = parseInt(response.headers.get("Content-Length") || "0");
    onStart(contentLength);
    readStream.on("data", (chunk) => {
      transferredBytes += chunk.length;
      onProgress(transferredBytes);
    });
    readStream.on("end", () => {
      writeStream.end();
      onComplete();
      writeStream.close(() => resolve("Finished!"));
    });
    readStream.on("error", () => {
      reject("Error!");
    });
  });
  import_node_fs.default.writeFileSync(outputPath, import_node_fs.default.readFileSync(tempPath));
  import_node_fs.default.rmSync(tempPath);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  downloader
});
