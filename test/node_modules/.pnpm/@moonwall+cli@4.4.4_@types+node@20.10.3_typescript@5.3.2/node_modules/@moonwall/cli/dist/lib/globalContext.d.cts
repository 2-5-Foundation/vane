import { MoonwallEnvironment, ConnectedProvider, FoundationType, MoonwallConfig, MoonwallProvider } from '@moonwall/types';
import { Network } from '@zombienet/orchestrator';
import net from 'net';
import { ChildProcess } from 'node:child_process';

declare class MoonwallContext {
    private static instance;
    environment: MoonwallEnvironment;
    providers: ConnectedProvider[];
    nodes: ChildProcess[];
    foundation: FoundationType;
    zombieNetwork?: Network;
    rtUpgradePath?: string;
    ipcServer?: net.Server;
    constructor(config: MoonwallConfig);
    private handleZombie;
    private handleDev;
    private handleReadOnly;
    private handleChopsticks;
    private startZombieNetwork;
    startNetwork(): Promise<void | MoonwallContext>;
    connectEnvironment(silent?: boolean): Promise<MoonwallContext>;
    disconnect(providerName?: string): Promise<void>;
    static printStats(): void;
    static getContext(config?: MoonwallConfig, force?: boolean): MoonwallContext;
    static destroy(): Promise<void>;
}
declare const contextCreator: () => Promise<MoonwallContext>;
declare const runNetworkOnly: () => Promise<void>;
interface IGlobalContextFoundation {
    name: string;
    context?: object;
    providers?: MoonwallProvider[];
    nodes?: {
        name?: string;
        cmd: string;
        args: string[];
        launch: boolean;
    }[];
    foundationType: FoundationType;
}

export { type IGlobalContextFoundation, MoonwallContext, contextCreator, runNetworkOnly };
