import type { AnyFunction } from '@polkadot/types/types';
import * as accounts from './accounts/index.js';
import * as alliance from './alliance/index.js';
import * as bagsList from './bagsList/index.js';
import * as balances from './balances/index.js';
import * as bounties from './bounties/index.js';
import * as chain from './chain/index.js';
import * as contracts from './contracts/index.js';
import * as council from './council/index.js';
import * as crowdloan from './crowdloan/index.js';
import * as democracy from './democracy/index.js';
import * as elections from './elections/index.js';
import * as imOnline from './imOnline/index.js';
import * as membership from './membership/index.js';
import * as parachains from './parachains/index.js';
import * as session from './session/index.js';
import * as society from './society/index.js';
import * as staking from './staking/index.js';
import * as technicalCommittee from './technicalCommittee/index.js';
import * as treasury from './treasury/index.js';
import * as tx from './tx/index.js';
export declare const derive: {
    accounts: typeof accounts;
    alliance: typeof alliance;
    bagsList: typeof bagsList;
    balances: typeof balances;
    bounties: typeof bounties;
    chain: typeof chain;
    contracts: typeof contracts;
    council: typeof council;
    crowdloan: typeof crowdloan;
    democracy: typeof democracy;
    elections: typeof elections;
    imOnline: typeof imOnline;
    membership: typeof membership;
    parachains: typeof parachains;
    session: typeof session;
    society: typeof society;
    staking: typeof staking;
    technicalCommittee: typeof technicalCommittee;
    treasury: typeof treasury;
    tx: typeof tx;
};
type DeriveSection<Section> = {
    [M in keyof Section]: Section[M] extends AnyFunction ? ReturnType<Section[M]> : never;
};
type DeriveAllSections<AllSections> = {
    [S in keyof AllSections]: DeriveSection<AllSections[S]>;
};
export interface ExactDerive extends DeriveAllSections<typeof derive> {
}
export {};
