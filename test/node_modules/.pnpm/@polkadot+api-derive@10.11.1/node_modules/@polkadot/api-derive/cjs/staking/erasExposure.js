"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.erasExposure = exports._erasExposure = exports.eraExposure = exports._eraExposure = void 0;
const rxjs_1 = require("rxjs");
const index_js_1 = require("../util/index.js");
const cache_js_1 = require("./cache.js");
const util_js_1 = require("./util.js");
const CACHE_KEY = 'eraExposure';
function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure]) => {
        const validatorId = key.args[1].toString();
        validators[validatorId] = exposure;
        exposure.others.forEach(({ who }, validatorIndex) => {
            const nominatorId = who.toString();
            nominators[nominatorId] = nominators[nominatorId] || [];
            nominators[nominatorId].push({ validatorId, validatorIndex });
        });
    });
    return { era, nominators, validators };
}
function _eraExposure(instanceId, api) {
    return (0, index_js_1.memo)(instanceId, (era, withActive = false) => {
        const [cacheKey, cached] = (0, cache_js_1.getEraCache)(CACHE_KEY, era, withActive);
        return cached
            ? (0, rxjs_1.of)(cached)
            : api.query.staking.erasStakersClipped.entries(era).pipe((0, rxjs_1.map)((r) => (0, cache_js_1.setEraCache)(cacheKey, withActive, mapStakers(era, r))));
    });
}
exports._eraExposure = _eraExposure;
exports.eraExposure = (0, util_js_1.singleEra)('_eraExposure');
exports._erasExposure = (0, util_js_1.combineEras)('_eraExposure');
exports.erasExposure = (0, util_js_1.erasHistoricApply)('_erasExposure');
