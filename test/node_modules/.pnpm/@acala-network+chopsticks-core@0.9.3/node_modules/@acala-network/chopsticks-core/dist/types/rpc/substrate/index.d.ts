import * as AuthorRPC from './author.js';
import * as ChainRPC from './chain.js';
import * as PaymentRPC from './payment.js';
import * as StateRPC from './state.js';
import * as SystemRPC from './system.js';
export { AuthorRPC };
export { ChainRPC };
export { PaymentRPC };
export { StateRPC };
export { SystemRPC };
declare const handlers: {
    system_localPeerId: () => Promise<string>;
    system_nodeRoles: () => Promise<string[]>;
    system_localListenAddresses: () => Promise<never[]>;
    system_chain: import("../shared.js").Handler<void, string>;
    system_properties: import("../shared.js").Handler<void, import("../../api.js").ChainProperties>;
    system_name: import("../shared.js").Handler<void, string>;
    system_version: import("../shared.js").Handler<void, string>;
    system_chainType: import("../shared.js").Handler<void, string>;
    system_health: () => Promise<{
        peers: number;
        isSyncing: boolean;
        shouldHavePeers: boolean;
    }>;
    system_dryRun: import("../shared.js").Handler<[`0x${string}`, `0x${string}`], string>;
    system_accountNextIndex: import("../shared.js").Handler<[`0x${string}`], number>;
    state_getRuntimeVersion: import("../shared.js").Handler<[`0x${string}`], import("../../index.js").RuntimeVersion | null>;
    state_getMetadata: import("../shared.js").Handler<[`0x${string}`], `0x${string}` | null>;
    state_getStorage: import("../shared.js").Handler<[`0x${string}`, `0x${string}`], string | null>;
    state_getKeysPaged: import("../shared.js").Handler<[string, number, string, `0x${string}`], string[] | undefined>;
    state_queryStorageAt: import("../shared.js").Handler<[string[], `0x${string}`], [] | [{
        block: `0x${string}`;
        changes: [string, string | null][];
    }]>;
    state_call: import("../shared.js").Handler<[`0x${string}`, `0x${string}`, `0x${string}`], `0x${string}`>;
    state_subscribeRuntimeVersion: import("../shared.js").Handler<[], string>;
    state_unsubscribeRuntimeVersion: import("../shared.js").Handler<[`0x${string}`], void>;
    state_subscribeStorage: import("../shared.js").Handler<[string[]], string>;
    state_unsubscribeStorage: import("../shared.js").Handler<[string], void>;
    childstate_getStorage: import("../shared.js").Handler<[`0x${string}`, `0x${string}`, `0x${string}`], string | null>;
    childstate_getKeysPaged: import("../shared.js").Handler<[`0x${string}`, `0x${string}`, number, `0x${string}`, `0x${string}`], `0x${string}`[] | undefined>;
    payment_queryFeeDetails: import("../shared.js").Handler<[`0x${string}`, `0x${string}`], `0x${string}`>;
    payment_queryInfo: import("../shared.js").Handler<[`0x${string}`, `0x${string}`], `0x${string}`>;
    chain_getBlockHash: import("../shared.js").Handler<[number | number[] | null], `0x${string}` | (`0x${string}` | null)[] | null>;
    chain_getHeader: import("../shared.js").Handler<[`0x${string}`], import("@polkadot/types/interfaces").Header>;
    chain_getBlock: import("../shared.js").Handler<[`0x${string}`], {
        block: {
            header: import("@polkadot/types/interfaces").Header;
            extrinsics: `0x${string}`[];
        };
        justifications: null;
    }>;
    chain_getFinalizedHead: import("../shared.js").Handler<void, `0x${string}`>;
    chain_subscribeNewHead: import("../shared.js").Handler<void, string>;
    chain_subscribeFinalizedHeads: import("../shared.js").Handler<void, string>;
    chain_unsubscribeNewHead: import("../shared.js").Handler<[string], void>;
    chain_getHead: import("../shared.js").Handler<[number | number[] | null], `0x${string}` | (`0x${string}` | null)[] | null>;
    chain_subscribeNewHeads: import("../shared.js").Handler<void, string>;
    chain_unsubscribeNewHeads: import("../shared.js").Handler<[string], void>;
    chain_unsubscribeFinalizedHeads: import("../shared.js").Handler<[string], void>;
    author_submitExtrinsic: import("../shared.js").Handler<[`0x${string}`], `0x${string}`>;
    author_submitAndWatchExtrinsic: import("../shared.js").Handler<[`0x${string}`], string>;
    author_unwatchExtrinsic: import("../shared.js").Handler<[string], void>;
    author_pendingExtrinsics: import("../shared.js").Handler<void, `0x${string}`[]>;
};
export default handlers;
