import { Api } from '../api.js';
import { Database } from '../database.js';
export declare const enum StorageValueKind {
    Deleted = "Deleted",
    DeletedPrefix = "DeletedPrefix"
}
export type StorageValue = string | StorageValueKind | undefined;
export interface StorageLayerProvider {
    /**
     * Get the value of a storage key.
     */
    get(key: string, cache: boolean): Promise<StorageValue>;
    /**
     * Fold the storage layer into another layer.
     */
    foldInto(into: StorageLayer): Promise<StorageLayerProvider | undefined>;
    /**
     * Fold the storage layer into the parent if it exists.
     */
    fold(): Promise<void>;
    /**
     * Get paged storage keys.
     */
    getKeysPaged(prefix: string, pageSize: number, startKey: string): Promise<string[]>;
}
export declare class RemoteStorageLayer implements StorageLayerProvider {
    #private;
    constructor(api: Api, at: string, db: Database | undefined);
    get(key: string, _cache: boolean): Promise<StorageValue>;
    foldInto(_into: StorageLayer): Promise<StorageLayerProvider>;
    fold(): Promise<void>;
    getKeysPaged(prefix: string, pageSize: number, startKey: string): Promise<string[]>;
}
export declare class StorageLayer implements StorageLayerProvider {
    #private;
    constructor(parent?: StorageLayerProvider);
    get(key: string, cache: boolean): Promise<StorageValue | undefined>;
    set(key: string, value: StorageValue): void;
    setAll(values: Record<string, StorageValue | null> | [string, StorageValue | null][]): void;
    foldInto(into: StorageLayer): Promise<StorageLayerProvider | undefined>;
    fold(): Promise<void>;
    getKeysPaged(prefix: string, pageSize: number, startKey: string): Promise<string[]>;
    /**
     * Merge the storage layer into the given object, can be used to get sotrage diff.
     */
    mergeInto(into: Record<string, string | null>): Promise<void>;
}
