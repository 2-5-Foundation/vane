import { stringToHex } from '@polkadot/util';
import { defaultLogger } from '../logger.js';
export const randomId = ()=>Math.random().toString(36).substring(2);
const logger = defaultLogger.child({
    name: 'head-state'
});
export class HeadState {
    #headListeners = {};
    #storageListeners = {};
    #oldValues = {};
    #head;
    constructor(head){
        this.#head = head;
    }
    subscribeHead(cb) {
        const id = randomId();
        this.#headListeners[id] = cb;
        return id;
    }
    unsubscribeHead(id) {
        delete this.#headListeners[id];
    }
    async subscribeStorage(keys, cb) {
        const id = randomId();
        this.#storageListeners[id] = [
            keys,
            cb
        ];
        for (const key of keys){
            this.#oldValues[key] = await this.#head.get(key).then((val)=>val || null);
        }
        return id;
    }
    unsubscribeStorage(id) {
        delete this.#storageListeners[id];
    }
    async subscrubeRuntimeVersion(cb) {
        const id = randomId();
        const codeKey = stringToHex(':code');
        this.#storageListeners[id] = [
            [
                codeKey
            ],
            cb
        ];
        this.#oldValues[codeKey] = await this.#head.get(codeKey).then((val)=>val || null);
        return id;
    }
    unsubscribeRuntimeVersion(id) {
        delete this.#storageListeners[id];
    }
    async setHead(head) {
        this.#head = head;
        for (const cb of Object.values(this.#headListeners)){
            try {
                await cb(head);
            } catch (error) {
                logger.error(error, 'setHead head callback error');
            }
        }
        const diff = await this.#head.storageDiff();
        for (const [keys, cb] of Object.values(this.#storageListeners)){
            const changed = keys.filter((key)=>diff[key]).map((key)=>[
                    key,
                    diff[key]
                ]);
            if (changed.length > 0) {
                try {
                    await cb(head, changed);
                } catch (error) {
                    logger.error(error, 'setHead storage diff callback error');
                }
            }
        }
        Object.assign(this.#oldValues, diff);
    }
}
