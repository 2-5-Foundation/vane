import { APPLY_EXTRINSIC_ERROR } from '../../blockchain/txpool.js';
import { ResponseError } from '../shared.js';
import { defaultLogger } from '../../logger.js';
const logger = defaultLogger.child({
    name: 'rpc-author'
});
/**
 * @param context
 * @param params - [`extrinsic`]
 *
 * @return Hash
 */ export const author_submitExtrinsic = async (context, [extrinsic])=>{
    return context.chain.submitExtrinsic(extrinsic).catch((error)=>{
        const code = error.isInvalid ? 1010 : 1011;
        throw new ResponseError(code, error.toString());
    });
};
/**
 * @param context
 * @param params - [`extrinsic`]
 * @param subscriptionManager
 *
 * @return subscription id
 */ export const author_submitAndWatchExtrinsic = async (context, [extrinsic], { subscribe, unsubscribe })=>{
    let update = (_block)=>{};
    const id = context.chain.headState.subscribeHead((block)=>update(block));
    const callback = subscribe('author_extrinsicUpdate', id, ()=>context.chain.headState.unsubscribeHead(id));
    const onExtrinsicFail = ([failedExtrinsic, error])=>{
        if (failedExtrinsic === extrinsic) {
            callback(error.toJSON());
            done(id);
        }
    };
    context.chain.txPool.event.on(APPLY_EXTRINSIC_ERROR, onExtrinsicFail);
    const done = (id)=>{
        context.chain.txPool.event.removeListener(APPLY_EXTRINSIC_ERROR, onExtrinsicFail);
        unsubscribe(id);
    };
    update = async (block)=>{
        const extrisnics = await block.extrinsics;
        if (!extrisnics.includes(extrinsic)) return;
        logger.debug({
            block: block.hash
        }, 'author_extrinsicUpdate');
        callback({
            inBlock: block.hash
        });
        // wait a bit for InBlock to be sent
        await new Promise((r)=>setTimeout(r, 100));
        callback({
            finalized: block.hash
        });
        done(id);
    };
    try {
        await context.chain.submitExtrinsic(extrinsic);
        // send callback after subscription id is returned
        setTimeout(()=>{
            callback({
                ready: null
            });
        }, 50);
    } catch (error) {
        logger.error({
            error
        }, 'ExtrinsicFailed');
        const code = error.isInvalid ? 1010 : 1011;
        done(id);
        throw new ResponseError(code, error.toString());
    }
    return id;
};
/**
 * @param _context
 * @param params - [`subid`]
 */ export const author_unwatchExtrinsic = async (_context, [subid], { unsubscribe })=>{
    unsubscribe(subid);
};
/**
 * Get pending extrinsics
 *
 * @return Array of pending extrinsics
 */ export const author_pendingExtrinsics = async (context)=>{
    return context.chain.txPool.pendingExtrinsics;
};
