"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    InherentProviders: function() {
        return InherentProviders;
    },
    ParaInherentEnter: function() {
        return _paraenter.ParaInherentEnter;
    },
    SetBabeRandomness: function() {
        return _baberandomness.SetBabeRandomness;
    },
    SetNimbusAuthorInherent: function() {
        return _nimbusauthorinherent.SetNimbusAuthorInherent;
    },
    SetTimestamp: function() {
        return SetTimestamp;
    },
    SetValidationData: function() {
        return _validationdata.SetValidationData;
    }
});
const _types = require("@polkadot/types");
const _timetravel = require("../../utils/time-travel.js");
const _validationdata = require("./parachain/validation-data.js");
const _paraenter = require("./para-enter.js");
const _baberandomness = require("./parachain/babe-randomness.js");
const _nimbusauthorinherent = require("./parachain/nimbus-author-inherent.js");
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
class SetTimestamp {
    async createInherents(parent) {
        const meta = await parent.meta;
        const slotDuration = await (0, _timetravel.getSlotDuration)(parent.chain);
        const currentTimestamp = await (0, _timetravel.getCurrentTimestamp)(parent.chain);
        return [
            new _types.GenericExtrinsic(meta.registry, meta.tx.timestamp.set(currentTimestamp + BigInt(slotDuration))).toHex()
        ];
    }
}
var _base = /*#__PURE__*/ new WeakMap(), _providers = /*#__PURE__*/ new WeakMap();
class InherentProviders {
    async createInherents(parent, params) {
        const base = await _class_private_field_get(this, _base).createInherents(parent, params);
        const extra = await Promise.all(_class_private_field_get(this, _providers).map((provider)=>provider.createInherents(parent, params)));
        return [
            ...base,
            ...extra.flat()
        ];
    }
    constructor(base, providers){
        _class_private_field_init(this, _base, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _providers, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _base, base);
        _class_private_field_set(this, _providers, providers);
    }
}
