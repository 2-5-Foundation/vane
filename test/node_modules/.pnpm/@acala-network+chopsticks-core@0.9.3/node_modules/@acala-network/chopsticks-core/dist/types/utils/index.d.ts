import { HexString } from '@polkadot/util/types';
import { StorageKey } from '@polkadot/types';
import { Blockchain } from '../blockchain/index.js';
export * from './set-storage.js';
export * from './time-travel.js';
export * from './decoder.js';
export type GetKeys = (startKey?: string) => Promise<StorageKey<any>[]>;
export type ProcessKey = (key: StorageKey<any>) => any;
export declare function fetchKeys(getKeys: GetKeys, processKey: ProcessKey): Promise<void>;
export declare function fetchKeysToArray(getKeys: GetKeys): Promise<StorageKey<any>[]>;
export declare const compactHex: (value: Uint8Array) => HexString;
export declare const getParaId: (chain: Blockchain) => Promise<import("@polkadot/types").U32>;
export declare const isUrl: (url: string) => boolean;
export type Deferred<T> = {
    resolve: (value: T | PromiseLike<T>) => void;
    reject: (reason?: any) => void;
    promise: Promise<T>;
};
export declare function defer<T>(): Deferred<T>;
export declare const prefixedChildKey: (prefix: HexString, key: HexString) => string;
export declare const isPrefixedChildKey: (key: HexString) => boolean;
export declare const splitChildKey: (key: HexString) => never[] | [`0x${string}`, `0x${string}`];
export declare const stripChildPrefix: (key: HexString) => `0x${string}`;
