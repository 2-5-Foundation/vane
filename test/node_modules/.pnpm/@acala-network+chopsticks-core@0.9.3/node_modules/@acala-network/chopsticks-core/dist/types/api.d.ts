import { ExtDef } from '@polkadot/types/extrinsic/signedExtensions/types';
import { HexString } from '@polkadot/util/types';
import { ProviderInterface, ProviderInterfaceCallback } from '@polkadot/rpc-provider/types';
export type ChainProperties = {
    ss58Format?: number;
    tokenDecimals?: number[];
    tokenSymbol?: string[];
};
type Header = {
    parentHash: HexString;
    number: HexString;
    stateRoot: HexString;
    extrinsicsRoot: HexString;
    digest: {
        logs: HexString[];
    };
};
type SignedBlock = {
    block: {
        header: Header;
        extrinsics: HexString[];
    };
    justifications?: HexString[];
};
/**
 * API class. Calls provider to get on-chain data.
 * Either `endpoint` or `genesis` porvider must be provided.
 *
 * @example Instantiate an API
 *
 * ```ts
 * const provider = new WsProvider(options.endpoint)
 * const api = new Api(provider)
 * await api.isReady
 * ```
 */
export declare class Api {
    #private;
    readonly signedExtensions: ExtDef;
    constructor(provider: ProviderInterface, signedExtensions?: ExtDef);
    disconnect(): Promise<void>;
    get isReady(): Promise<void> | undefined;
    get chain(): Promise<string>;
    get chainProperties(): Promise<ChainProperties>;
    getSystemName(): Promise<string>;
    getSystemProperties(): Promise<ChainProperties>;
    getSystemChain(): Promise<string>;
    getBlockHash(blockNumber?: number): Promise<`0x${string}` | null>;
    getHeader(hash?: string): Promise<Header | null>;
    getBlock(hash?: string): Promise<SignedBlock | null>;
    getStorage(key: string, hash?: string): Promise<`0x${string}` | null>;
    getKeysPaged(prefix: string, pageSize: number, startKey: string, hash?: string): Promise<string[]>;
    subscribeRemoteNewHeads(cb: ProviderInterfaceCallback): Promise<string | number>;
    subscribeRemoteFinalizedHeads(cb: ProviderInterfaceCallback): Promise<string | number>;
}
export {};
