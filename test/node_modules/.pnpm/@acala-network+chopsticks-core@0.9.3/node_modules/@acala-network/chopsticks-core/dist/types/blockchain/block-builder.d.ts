import { Header, TransactionValidityError } from '@polkadot/types/interfaces';
import { Block } from './block.js';
import { HexString } from '@polkadot/util/types';
import { TaskCallResponse } from '../wasm-executor/index.js';
export declare const newHeader: (head: Block, unsafeBlockHeight?: number) => Promise<Header>;
export type BuildBlockCallbacks = {
    onApplyExtrinsicError?: (extrinsic: HexString, error: TransactionValidityError) => void;
    onPhaseApplied?: (phase: 'initialize' | 'finalize' | number, resp: TaskCallResponse) => void;
};
export declare const buildBlock: (head: Block, inherents: HexString[], extrinsics: HexString[], ump: Record<number, HexString[]>, callbacks?: BuildBlockCallbacks, unsafeBlockHeight?: number) => Promise<[Block, HexString[]]>;
export declare const dryRunExtrinsic: (head: Block, inherents: HexString[], extrinsic: HexString | {
    call: HexString;
    address: string;
}) => Promise<TaskCallResponse>;
export declare const dryRunInherents: (head: Block, inherents: HexString[]) => Promise<[HexString, HexString | null][]>;
