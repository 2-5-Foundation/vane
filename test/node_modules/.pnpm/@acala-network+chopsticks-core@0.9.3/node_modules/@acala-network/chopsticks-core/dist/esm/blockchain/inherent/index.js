import { GenericExtrinsic } from '@polkadot/types';
import { getCurrentTimestamp, getSlotDuration } from '../../utils/time-travel.js';
export { SetValidationData } from './parachain/validation-data.js';
export { ParaInherentEnter } from './para-enter.js';
export { SetBabeRandomness } from './parachain/babe-randomness.js';
export { SetNimbusAuthorInherent } from './parachain/nimbus-author-inherent.js';
export class SetTimestamp {
    async createInherents(parent) {
        const meta = await parent.meta;
        const slotDuration = await getSlotDuration(parent.chain);
        const currentTimestamp = await getCurrentTimestamp(parent.chain);
        return [
            new GenericExtrinsic(meta.registry, meta.tx.timestamp.set(currentTimestamp + BigInt(slotDuration))).toHex()
        ];
    }
}
export class InherentProviders {
    #base;
    #providers;
    constructor(base, providers){
        this.#base = base;
        this.#providers = providers;
    }
    async createInherents(parent, params) {
        const base = await this.#base.createInherents(parent, params);
        const extra = await Promise.all(this.#providers.map((provider)=>provider.createInherents(parent, params)));
        return [
            ...base,
            ...extra.flat()
        ];
    }
}
